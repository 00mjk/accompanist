{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Accompanist is a group of libraries that contains some utilities which I've found myself copying around projects which use Jetpack Compose . Currently, it contains: \ud83d\uddbc\ufe0f Coil image loading composables Jetpack Compose is a fast-moving project and I'll be updating these libraries to match the latest tagged release as quickly as possible. Each release listing will outline what version of Compose libraries it depends on. Download \u00b6 repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-coil:<version>\" } Accompanist Snapshots \u00b6 Snapshots of the current development version of Accompanist are available, which track the latest commit. See here for more information. Why the name? \u00b6 The library is all about adding some utilities around Compose. Music composing is done by a composer, and since this library is about supporting composition, the supporting role of an accompanist felt like a good name. Contributions \u00b6 Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though. License \u00b6 Copyright 2020 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#download","text":"repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-coil:<version>\" }","title":"Download"},{"location":"#accompanist-snapshots","text":"Snapshots of the current development version of Accompanist are available, which track the latest commit. See here for more information.","title":"Accompanist Snapshots"},{"location":"#why-the-name","text":"The library is all about adding some utilities around Compose. Music composing is done by a composer, and since this library is about supporting composition, the supporting role of an accompanist felt like a good name.","title":"Why the name?"},{"location":"#contributions","text":"Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.","title":"Contributions"},{"location":"#license","text":"Copyright 2020 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"contributing/","text":"How to Contribute \u00b6 We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow. Contributor License Agreement \u00b6 Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again. Code reviews \u00b6 All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Contributing"},{"location":"contributing/#how-to-contribute","text":"We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.","title":"How to Contribute"},{"location":"contributing/#contributor-license-agreement","text":"Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.","title":"Contributor License Agreement"},{"location":"contributing/#code-reviews","text":"All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Code reviews"},{"location":"using-snapshot-version/","text":"Using a Snapshot Version of the Library \u00b6 If you would like to depend on the cutting edge version of the Accompanist library, you can use the snapshot versions that are published to Sonatype OSSRH 's snapshot repository. These are updated on every commit to main . To do so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXX-SNAPSHOT' } You might see a number of different versioned snapshots. If we use an example: 0.1.5-SNAPSHOT is a build from the main branch, and depends on the latest tagged Jetpack Compose release (i.e. dev12 ). 0.1.5.ui-6574163-SNAPSHOT is a build from the snapshot branch. This depends on the SNAPSHOT build of Jetpack Compose from build 6574163. You should only use these if you are using Jetpack Compose snapshot versions (see below). Using Jetpack Compose Snapshots \u00b6 If you're using SNAPSHOT versions of the androidx.compose libraries, you might run into issues with the current stable Accompanist release forcing an older version of those libraries. We publish snapshot versions of Accompanist which depend on recent Jetpack Compose SNAPSHOT repositories. To find a recent build, look through the snapshot repository for any versions in the scheme x.x.x.ui-YYYY-SNAPSHOT (for example: 0.1.5.ui-6574163-SNAPSHOT ). The YYYY in the scheme is the snapshot build being used from AndroidX (from the example: build 6574163 ). You can then use it like so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXXX.ui-YYYYY-SNAPSHOT' } These builds are updated regularly, but there's no guarantee that I will create one for a given snapshot number.","title":"Snapshots"},{"location":"using-snapshot-version/#using-a-snapshot-version-of-the-library","text":"If you would like to depend on the cutting edge version of the Accompanist library, you can use the snapshot versions that are published to Sonatype OSSRH 's snapshot repository. These are updated on every commit to main . To do so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXX-SNAPSHOT' } You might see a number of different versioned snapshots. If we use an example: 0.1.5-SNAPSHOT is a build from the main branch, and depends on the latest tagged Jetpack Compose release (i.e. dev12 ). 0.1.5.ui-6574163-SNAPSHOT is a build from the snapshot branch. This depends on the SNAPSHOT build of Jetpack Compose from build 6574163. You should only use these if you are using Jetpack Compose snapshot versions (see below).","title":"Using a Snapshot Version of the Library"},{"location":"using-snapshot-version/#using-jetpack-compose-snapshots","text":"If you're using SNAPSHOT versions of the androidx.compose libraries, you might run into issues with the current stable Accompanist release forcing an older version of those libraries. We publish snapshot versions of Accompanist which depend on recent Jetpack Compose SNAPSHOT repositories. To find a recent build, look through the snapshot repository for any versions in the scheme x.x.x.ui-YYYY-SNAPSHOT (for example: 0.1.5.ui-6574163-SNAPSHOT ). The YYYY in the scheme is the snapshot build being used from AndroidX (from the example: build 6574163 ). You can then use it like so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXXX.ui-YYYYY-SNAPSHOT' } These builds are updated regularly, but there's no guarantee that I will create one for a given snapshot number.","title":"Using Jetpack Compose Snapshots"},{"location":"api/coil/","text":"coil Packages \u00b6 Name Summary dev.chrisbanes.accompanist.coil Index \u00b6 All Types","title":"Coil"},{"location":"api/coil/#packages","text":"Name Summary dev.chrisbanes.accompanist.coil","title":"Packages"},{"location":"api/coil/#index","text":"All Types","title":"Index"},{"location":"api/coil/alltypes/","text":"All Types \u00b6 Name Summary dev.chrisbanes.accompanist.coil.ErrorResult \u00b6 Indicates that an error occurred while executing the request. | dev.chrisbanes.accompanist.coil.ImageLoadingColorMatrix \u00b6 An extension to ColorMatrix which implements the Material Design image loading pattern. | dev.chrisbanes.accompanist.coil.RequestResult \u00b6 Represents the result of an image request. | dev.chrisbanes.accompanist.coil.SuccessResult \u00b6 Indicates that the request completed successfully.","title":"Index"},{"location":"api/coil/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/coil/alltypes/#devchrisbanesaccompanistcoilerrorresult","text":"Indicates that an error occurred while executing the request. |","title":"dev.chrisbanes.accompanist.coil.ErrorResult"},{"location":"api/coil/alltypes/#devchrisbanesaccompanistcoilimageloadingcolormatrix","text":"An extension to ColorMatrix which implements the Material Design image loading pattern. |","title":"dev.chrisbanes.accompanist.coil.ImageLoadingColorMatrix"},{"location":"api/coil/alltypes/#devchrisbanesaccompanistcoilrequestresult","text":"Represents the result of an image request. |","title":"dev.chrisbanes.accompanist.coil.RequestResult"},{"location":"api/coil/alltypes/#devchrisbanesaccompanistcoilsuccessresult","text":"Indicates that the request completed successfully.","title":"dev.chrisbanes.accompanist.coil.SuccessResult"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/","text":"coil / dev.chrisbanes.accompanist.coil Package dev.chrisbanes.accompanist.coil \u00b6 Types \u00b6 Name Summary ErrorResult Indicates that an error occurred while executing the request. data class ErrorResult : RequestResult ImageLoadingColorMatrix An extension to ColorMatrix which implements the Material Design image loading pattern. class ImageLoadingColorMatrix : ColorMatrix RequestResult Represents the result of an image request. sealed class RequestResult SuccessResult Indicates that the request completed successfully. data class SuccessResult : RequestResult Functions \u00b6 Name Summary CoilImage Creates a composable that will attempt to load the given data using Coil , and then display the result in an Image . fun CoilImage(data: Any , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, colorFilter: ColorFilter ? = null, getSuccessPainter: (( SuccessResult ) -> Painter )? = null, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given request using Coil , and then display the result in an Image . fun CoilImage(request: ImageRequest , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, colorFilter: ColorFilter ? = null, getSuccessPainter: (( SuccessResult ) -> Painter )? = null, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit CoilImageWithCrossfade Creates a composable that will attempt to load the given data using Coil , and then display the result in an androidx.compose.foundation.Image , using a crossfade when first loaded. fun CoilImageWithCrossfade(data: Any , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, crossfadeDuration: Int = DefaultTransitionDuration, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given request using Coil , and then display the result in an androidx.compose.foundation.Image , using a crossfade animation when first loaded. fun CoilImageWithCrossfade(request: ImageRequest , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, crossfadeDuration: Int = DefaultTransitionDuration, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/#package-devchrisbanesaccompanistcoil","text":"","title":"Package dev.chrisbanes.accompanist.coil"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/#types","text":"Name Summary ErrorResult Indicates that an error occurred while executing the request. data class ErrorResult : RequestResult ImageLoadingColorMatrix An extension to ColorMatrix which implements the Material Design image loading pattern. class ImageLoadingColorMatrix : ColorMatrix RequestResult Represents the result of an image request. sealed class RequestResult SuccessResult Indicates that the request completed successfully. data class SuccessResult : RequestResult","title":"Types"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/#functions","text":"Name Summary CoilImage Creates a composable that will attempt to load the given data using Coil , and then display the result in an Image . fun CoilImage(data: Any , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, colorFilter: ColorFilter ? = null, getSuccessPainter: (( SuccessResult ) -> Painter )? = null, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given request using Coil , and then display the result in an Image . fun CoilImage(request: ImageRequest , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, colorFilter: ColorFilter ? = null, getSuccessPainter: (( SuccessResult ) -> Painter )? = null, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit CoilImageWithCrossfade Creates a composable that will attempt to load the given data using Coil , and then display the result in an androidx.compose.foundation.Image , using a crossfade when first loaded. fun CoilImageWithCrossfade(data: Any , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, crossfadeDuration: Int = DefaultTransitionDuration, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given request using Coil , and then display the result in an androidx.compose.foundation.Image , using a crossfade animation when first loaded. fun CoilImageWithCrossfade(request: ImageRequest , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, crossfadeDuration: Int = DefaultTransitionDuration, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit","title":"Functions"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-with-crossfade/","text":"coil / dev.chrisbanes.accompanist.coil / CoilImageWithCrossfade CoilImageWithCrossfade \u00b6 @Composable fun CoilImageWithCrossfade(data: Any , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, crossfadeDuration: Int = DefaultTransitionDuration, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given data using Coil , and then display the result in an androidx.compose.foundation.Image , using a crossfade when first loaded. The animation fades in the image's saturation, alpha and exposure. More information on the pattern can be seen here . Parameters \u00b6 data - The data to load. See ImageRequest.Builder.data for the types allowed. modifier - Modifier used to adjust the layout algorithm or draw decoration content. alignment - Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. contentScale - Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset . crossfadeDuration - The duration of the crossfade animation in milliseconds. getFailurePainter - Optional builder for the Painter to be used to draw the failure loading result. Passing in null will result in falling back to the default Painter . shouldRefetchOnSizeChange - Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. onRequestCompleted - Listener which will be called when the loading request has finished. @Composable fun CoilImageWithCrossfade(request: ImageRequest , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, crossfadeDuration: Int = DefaultTransitionDuration, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given request using Coil , and then display the result in an androidx.compose.foundation.Image , using a crossfade animation when first loaded. The animation fades in the image's saturation, alpha and exposure. More information on the pattern can be seen here . Parameters \u00b6 request - The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. modifier - Modifier used to adjust the layout algorithm or draw decoration content. alignment - Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. contentScale - Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset . crossfadeDuration - The duration of the crossfade animation in milliseconds. getFailurePainter - Optional builder for the Painter to be used to draw the failure loading result. Passing in null will result in falling back to the default Painter . shouldRefetchOnSizeChange - Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. onRequestCompleted - Listener which will be called when the loading request has finished.","title":" coil image with crossfade"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-with-crossfade/#coilimagewithcrossfade","text":"@Composable fun CoilImageWithCrossfade(data: Any , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, crossfadeDuration: Int = DefaultTransitionDuration, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given data using Coil , and then display the result in an androidx.compose.foundation.Image , using a crossfade when first loaded. The animation fades in the image's saturation, alpha and exposure. More information on the pattern can be seen here .","title":"CoilImageWithCrossfade"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-with-crossfade/#parameters","text":"data - The data to load. See ImageRequest.Builder.data for the types allowed. modifier - Modifier used to adjust the layout algorithm or draw decoration content. alignment - Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. contentScale - Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset . crossfadeDuration - The duration of the crossfade animation in milliseconds. getFailurePainter - Optional builder for the Painter to be used to draw the failure loading result. Passing in null will result in falling back to the default Painter . shouldRefetchOnSizeChange - Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. onRequestCompleted - Listener which will be called when the loading request has finished. @Composable fun CoilImageWithCrossfade(request: ImageRequest , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, crossfadeDuration: Int = DefaultTransitionDuration, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given request using Coil , and then display the result in an androidx.compose.foundation.Image , using a crossfade animation when first loaded. The animation fades in the image's saturation, alpha and exposure. More information on the pattern can be seen here .","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-with-crossfade/#parameters_1","text":"request - The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. modifier - Modifier used to adjust the layout algorithm or draw decoration content. alignment - Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. contentScale - Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset . crossfadeDuration - The duration of the crossfade animation in milliseconds. getFailurePainter - Optional builder for the Painter to be used to draw the failure loading result. Passing in null will result in falling back to the default Painter . shouldRefetchOnSizeChange - Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. onRequestCompleted - Listener which will be called when the loading request has finished.","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/","text":"coil / dev.chrisbanes.accompanist.coil / CoilImage CoilImage \u00b6 @Composable fun CoilImage(data: Any , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, colorFilter: ColorFilter ? = null, getSuccessPainter: (( SuccessResult ) -> Painter )? = null, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given data using Coil , and then display the result in an Image . Parameters \u00b6 data - The data to load. See ImageRequest.Builder.data for the types allowed. modifier - Modifier used to adjust the layout algorithm or draw decoration content. alignment - Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. contentScale - Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset . colorFilter - Optional colorFilter to apply for the Painter when it is rendered onscreen. getSuccessPainter - Optional builder for the Painter to be used to draw the successful loading result. Passing in null will result in falling back to the default Painter . getFailurePainter - Optional builder for the Painter to be used to draw the failure loading result. Passing in null will result in falling back to the default Painter . loading - Content to be displayed when the request is in progress. shouldRefetchOnSizeChange - Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. onRequestCompleted - Listener which will be called when the loading request has finished. @Composable fun CoilImage(request: ImageRequest , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, colorFilter: ColorFilter ? = null, getSuccessPainter: (( SuccessResult ) -> Painter )? = null, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given request using Coil , and then display the result in an Image . Parameters \u00b6 request - The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. modifier - Modifier used to adjust the layout algorithm or draw decoration content. alignment - Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. contentScale - Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset . colorFilter - Optional colorFilter to apply for the Painter when it is rendered onscreen. getSuccessPainter - Optional builder for the Painter to be used to draw the successful loading result. Passing in null will result in falling back to the default Painter . getFailurePainter - Optional builder for the Painter to be used to draw the failure loading result. Passing in null will result in falling back to the default Painter . loading - Content to be displayed when the request is in progress. shouldRefetchOnSizeChange - Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. onRequestCompleted - Listener which will be called when the loading request has finished.","title":" coil image"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#coilimage","text":"@Composable fun CoilImage(data: Any , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, colorFilter: ColorFilter ? = null, getSuccessPainter: (( SuccessResult ) -> Painter )? = null, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given data using Coil , and then display the result in an Image .","title":"CoilImage"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#parameters","text":"data - The data to load. See ImageRequest.Builder.data for the types allowed. modifier - Modifier used to adjust the layout algorithm or draw decoration content. alignment - Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. contentScale - Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset . colorFilter - Optional colorFilter to apply for the Painter when it is rendered onscreen. getSuccessPainter - Optional builder for the Painter to be used to draw the successful loading result. Passing in null will result in falling back to the default Painter . getFailurePainter - Optional builder for the Painter to be used to draw the failure loading result. Passing in null will result in falling back to the default Painter . loading - Content to be displayed when the request is in progress. shouldRefetchOnSizeChange - Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. onRequestCompleted - Listener which will be called when the loading request has finished. @Composable fun CoilImage(request: ImageRequest , modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, colorFilter: ColorFilter ? = null, getSuccessPainter: (( SuccessResult ) -> Painter )? = null, getFailurePainter: (( ErrorResult ) -> Painter ?)? = null, loading: (() -> Unit )? = null, shouldRefetchOnSizeChange: (currentResult: RequestResult , size: IntSize ) -> Boolean = defaultRefetchOnSizeChangeLambda, onRequestCompleted: ( RequestResult ) -> Unit = emptySuccessLambda): Unit Creates a composable that will attempt to load the given request using Coil , and then display the result in an Image .","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#parameters_1","text":"request - The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. modifier - Modifier used to adjust the layout algorithm or draw decoration content. alignment - Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. contentScale - Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset . colorFilter - Optional colorFilter to apply for the Painter when it is rendered onscreen. getSuccessPainter - Optional builder for the Painter to be used to draw the successful loading result. Passing in null will result in falling back to the default Painter . getFailurePainter - Optional builder for the Painter to be used to draw the failure loading result. Passing in null will result in falling back to the default Painter . loading - Content to be displayed when the request is in progress. shouldRefetchOnSizeChange - Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. onRequestCompleted - Listener which will be called when the loading request has finished.","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/","text":"coil / dev.chrisbanes.accompanist.coil / ErrorResult ErrorResult \u00b6 data class ErrorResult : RequestResult Indicates that an error occurred while executing the request. Parameters \u00b6 image - The error image. throwable - The error that failed the request. Constructors \u00b6 Name Summary <init> Indicates that an error occurred while executing the request. ErrorResult(image: ImageAsset ?, throwable: Throwable ) Properties \u00b6 Name Summary image The error image. val image: ImageAsset ? throwable The error that failed the request. val throwable: Throwable","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/#errorresult","text":"data class ErrorResult : RequestResult Indicates that an error occurred while executing the request.","title":"ErrorResult"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/#parameters","text":"image - The error image. throwable - The error that failed the request.","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/#constructors","text":"Name Summary <init> Indicates that an error occurred while executing the request. ErrorResult(image: ImageAsset ?, throwable: Throwable )","title":"Constructors"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/#properties","text":"Name Summary image The error image. val image: ImageAsset ? throwable The error that failed the request. val throwable: Throwable","title":"Properties"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/-init-/","text":"coil / dev.chrisbanes.accompanist.coil / ErrorResult / <init> <init> \u00b6 ErrorResult(image: ImageAsset ?, throwable: Throwable ) Indicates that an error occurred while executing the request. Parameters \u00b6 image - The error image. throwable - The error that failed the request.","title":" init "},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/-init-/#init","text":"ErrorResult(image: ImageAsset ?, throwable: Throwable ) Indicates that an error occurred while executing the request.","title":"&lt;init&gt;"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/-init-/#parameters","text":"image - The error image. throwable - The error that failed the request.","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/image/","text":"coil / dev.chrisbanes.accompanist.coil / ErrorResult / image image \u00b6 val image: ImageAsset ? The error image.","title":"Image"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/image/#image","text":"val image: ImageAsset ? The error image.","title":"image"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/throwable/","text":"coil / dev.chrisbanes.accompanist.coil / ErrorResult / throwable throwable \u00b6 val throwable: Throwable The error that failed the request.","title":"Throwable"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/throwable/#throwable","text":"val throwable: Throwable The error that failed the request.","title":"throwable"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/","text":"coil / dev.chrisbanes.accompanist.coil / ImageLoadingColorMatrix ImageLoadingColorMatrix \u00b6 class ImageLoadingColorMatrix : ColorMatrix An extension to ColorMatrix which implements the Material Design image loading pattern. See Also https Constructors \u00b6 Name Summary <init> An extension to ColorMatrix which implements the Material Design image loading pattern. ImageLoadingColorMatrix(saturation: Float = 1f, alpha: Float = 1f, brightness: Float = 1f) Properties \u00b6 Name Summary alphaFraction var alphaFraction: Float brightnessFraction var brightnessFraction: Float saturationFraction var saturationFraction: Float","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/#imageloadingcolormatrix","text":"class ImageLoadingColorMatrix : ColorMatrix An extension to ColorMatrix which implements the Material Design image loading pattern. See Also https","title":"ImageLoadingColorMatrix"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/#constructors","text":"Name Summary <init> An extension to ColorMatrix which implements the Material Design image loading pattern. ImageLoadingColorMatrix(saturation: Float = 1f, alpha: Float = 1f, brightness: Float = 1f)","title":"Constructors"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/#properties","text":"Name Summary alphaFraction var alphaFraction: Float brightnessFraction var brightnessFraction: Float saturationFraction var saturationFraction: Float","title":"Properties"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/-init-/","text":"coil / dev.chrisbanes.accompanist.coil / ImageLoadingColorMatrix / <init> <init> \u00b6 ImageLoadingColorMatrix(saturation: Float = 1f, alpha: Float = 1f, brightness: Float = 1f) An extension to ColorMatrix which implements the Material Design image loading pattern. See Also https","title":" init "},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/-init-/#init","text":"ImageLoadingColorMatrix(saturation: Float = 1f, alpha: Float = 1f, brightness: Float = 1f) An extension to ColorMatrix which implements the Material Design image loading pattern. See Also https","title":"&lt;init&gt;"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/alpha-fraction/","text":"coil / dev.chrisbanes.accompanist.coil / ImageLoadingColorMatrix / alphaFraction alphaFraction \u00b6 var alphaFraction: Float","title":"Alpha fraction"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/alpha-fraction/#alphafraction","text":"var alphaFraction: Float","title":"alphaFraction"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/brightness-fraction/","text":"coil / dev.chrisbanes.accompanist.coil / ImageLoadingColorMatrix / brightnessFraction brightnessFraction \u00b6 var brightnessFraction: Float","title":"Brightness fraction"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/brightness-fraction/#brightnessfraction","text":"var brightnessFraction: Float","title":"brightnessFraction"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/saturation-fraction/","text":"coil / dev.chrisbanes.accompanist.coil / ImageLoadingColorMatrix / saturationFraction saturationFraction \u00b6 var saturationFraction: Float","title":"Saturation fraction"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/saturation-fraction/#saturationfraction","text":"var saturationFraction: Float","title":"saturationFraction"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-request-result/","text":"coil / dev.chrisbanes.accompanist.coil / RequestResult RequestResult \u00b6 sealed class RequestResult Represents the result of an image request. Properties \u00b6 Name Summary image abstract val image: ImageAsset ? Inheritors \u00b6 Name Summary ErrorResult Indicates that an error occurred while executing the request. data class ErrorResult : RequestResult SuccessResult Indicates that the request completed successfully. data class SuccessResult : RequestResult","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-request-result/#requestresult","text":"sealed class RequestResult Represents the result of an image request.","title":"RequestResult"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-request-result/#properties","text":"Name Summary image abstract val image: ImageAsset ?","title":"Properties"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-request-result/#inheritors","text":"Name Summary ErrorResult Indicates that an error occurred while executing the request. data class ErrorResult : RequestResult SuccessResult Indicates that the request completed successfully. data class SuccessResult : RequestResult","title":"Inheritors"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-request-result/image/","text":"coil / dev.chrisbanes.accompanist.coil / RequestResult / image image \u00b6 abstract val image: ImageAsset ?","title":"Image"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-request-result/image/#image","text":"abstract val image: ImageAsset ?","title":"image"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/","text":"coil / dev.chrisbanes.accompanist.coil / SuccessResult SuccessResult \u00b6 data class SuccessResult : RequestResult Indicates that the request completed successfully. Parameters \u00b6 image - The result image. source - The data source that the image was loaded from. Constructors \u00b6 Name Summary <init> Indicates that the request completed successfully. SuccessResult(image: ImageAsset , source: DataSource ) Properties \u00b6 Name Summary image The result image. val image: ImageAsset source The data source that the image was loaded from. val source: DataSource","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/#successresult","text":"data class SuccessResult : RequestResult Indicates that the request completed successfully.","title":"SuccessResult"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/#parameters","text":"image - The result image. source - The data source that the image was loaded from.","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/#constructors","text":"Name Summary <init> Indicates that the request completed successfully. SuccessResult(image: ImageAsset , source: DataSource )","title":"Constructors"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/#properties","text":"Name Summary image The result image. val image: ImageAsset source The data source that the image was loaded from. val source: DataSource","title":"Properties"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/-init-/","text":"coil / dev.chrisbanes.accompanist.coil / SuccessResult / <init> <init> \u00b6 SuccessResult(image: ImageAsset , source: DataSource ) Indicates that the request completed successfully. Parameters \u00b6 image - The result image. source - The data source that the image was loaded from.","title":" init "},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/-init-/#init","text":"SuccessResult(image: ImageAsset , source: DataSource ) Indicates that the request completed successfully.","title":"&lt;init&gt;"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/-init-/#parameters","text":"image - The result image. source - The data source that the image was loaded from.","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/image/","text":"coil / dev.chrisbanes.accompanist.coil / SuccessResult / image image \u00b6 val image: ImageAsset The result image.","title":"Image"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/image/#image","text":"val image: ImageAsset The result image.","title":"image"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/source/","text":"coil / dev.chrisbanes.accompanist.coil / SuccessResult / source source \u00b6 val source: DataSource The data source that the image was loaded from.","title":"Source"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/source/#source","text":"val source: DataSource The data source that the image was loaded from.","title":"source"}]}