{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Accompanist is a group of libraries that contains some utilities which I've found myself copying around projects which use Jetpack Compose . Currently, it contains: \ud83d\uddbc\ufe0f Coil image loading composables Jetpack Compose is a fast-moving project and I'll be updating these libraries to match the latest tagged release as quickly as possible. Each release listing will outline what version of Compose libraries it depends on. Download \u00b6 repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-coil:<version>\" } Accompanist Snapshots \u00b6 Snapshots of the current development version of Accompanist are available, which track the latest commit. See here for more information. Why the name? \u00b6 The library is all about adding some utilities around Compose. Music composing is done by a composer, and since this library is about supporting composition, the supporting role of an accompanist felt like a good name. Contributions \u00b6 Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though. License \u00b6 Copyright 2020 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#download","text":"repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-coil:<version>\" }","title":"Download"},{"location":"#accompanist-snapshots","text":"Snapshots of the current development version of Accompanist are available, which track the latest commit. See here for more information.","title":"Accompanist Snapshots"},{"location":"#why-the-name","text":"The library is all about adding some utilities around Compose. Music composing is done by a composer, and since this library is about supporting composition, the supporting role of an accompanist felt like a good name.","title":"Why the name?"},{"location":"#contributions","text":"Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.","title":"Contributions"},{"location":"#license","text":"Copyright 2020 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"coil/","text":"Jetpack Compose + Coil \u00b6 This library brings easy-to-use composable which can fetch and display images from external sources, such as network, using the Coil image loading library. CoilImage() \u00b6 The primary API is via the CoilImage() functions. There are a number of function versions available. The simplest usage is like so: CoilImage ( data = \"https://loremflickr.com/300/300\" ) This loads the data passed in with Coil , and then displays the resulting image using the standard Image composable. There is also a version of this function which accepts a Coil ImageRequest , allowing full customization of the request. This allows usage of things like (but not limited to) transformations: CoilImage ( request = GetRequest . Builder ( ContextAmbient . current ) . data ( \"https://loremflickr.com/300/300\" ) . transformations ( CircleCropTransformation ()) . build () ) Fade-in animation \u00b6 This library has built-in support for animating loaded images in, using a fade-in animation . There are two ways to enable the animation: fadeIn parameter \u00b6 A fadeIn: Boolean parameter has been added to CoilImage (default: false ). When enabled, a default fade-in animation will be used when the image is successfully loaded: CoilImage ( data = \"https://random.image\" , fadeIn = true , ) Custom layout \u00b6 If you need more control over the animation, you can use the image content composable lambda on CoilImage to display the result in a MaterialLoadingImage : CoilImage ( data = \"https://random.image\" , ) { result -> MaterialLoadingImage ( result = result , fadeInDurationMs = 600 , ) } Download \u00b6 repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-coil:<version>\" } Limitations \u00b6 Compose currently only supports static bitmap images, which means that we need to convert the resulting images to a Bitmap . This means that using things like Coil's GIF support will result in only the first frame being rendered, instead of animating. Snapshots of the development version are available in Sonatype's snapshots repository . These are updated on every commit. What's the goal of the library? \u00b6 Eventually the goal is to upstream all of this functionality back to Coil . Jetpack Compose 's development is currently moving very fast, which means that there are frequent API changes between releases. For now, it makes sense to keep this as a seperately released library to track the latest Compose release.","title":"Coil"},{"location":"coil/#jetpack-compose-coil","text":"This library brings easy-to-use composable which can fetch and display images from external sources, such as network, using the Coil image loading library.","title":"Jetpack Compose + Coil"},{"location":"coil/#coilimage","text":"The primary API is via the CoilImage() functions. There are a number of function versions available. The simplest usage is like so: CoilImage ( data = \"https://loremflickr.com/300/300\" ) This loads the data passed in with Coil , and then displays the resulting image using the standard Image composable. There is also a version of this function which accepts a Coil ImageRequest , allowing full customization of the request. This allows usage of things like (but not limited to) transformations: CoilImage ( request = GetRequest . Builder ( ContextAmbient . current ) . data ( \"https://loremflickr.com/300/300\" ) . transformations ( CircleCropTransformation ()) . build () )","title":"CoilImage()"},{"location":"coil/#fade-in-animation","text":"This library has built-in support for animating loaded images in, using a fade-in animation . There are two ways to enable the animation:","title":"Fade-in animation"},{"location":"coil/#fadein-parameter","text":"A fadeIn: Boolean parameter has been added to CoilImage (default: false ). When enabled, a default fade-in animation will be used when the image is successfully loaded: CoilImage ( data = \"https://random.image\" , fadeIn = true , )","title":"fadeIn parameter"},{"location":"coil/#custom-layout","text":"If you need more control over the animation, you can use the image content composable lambda on CoilImage to display the result in a MaterialLoadingImage : CoilImage ( data = \"https://random.image\" , ) { result -> MaterialLoadingImage ( result = result , fadeInDurationMs = 600 , ) }","title":"Custom layout"},{"location":"coil/#download","text":"repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-coil:<version>\" }","title":"Download"},{"location":"coil/#limitations","text":"Compose currently only supports static bitmap images, which means that we need to convert the resulting images to a Bitmap . This means that using things like Coil's GIF support will result in only the first frame being rendered, instead of animating. Snapshots of the development version are available in Sonatype's snapshots repository . These are updated on every commit.","title":"Limitations"},{"location":"coil/#whats-the-goal-of-the-library","text":"Eventually the goal is to upstream all of this functionality back to Coil . Jetpack Compose 's development is currently moving very fast, which means that there are frequent API changes between releases. For now, it makes sense to keep this as a seperately released library to track the latest Compose release.","title":"What's the goal of the library?"},{"location":"contributing/","text":"How to Contribute \u00b6 We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow. Contributor License Agreement \u00b6 Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again. Code reviews \u00b6 All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Contributing"},{"location":"contributing/#how-to-contribute","text":"We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.","title":"How to Contribute"},{"location":"contributing/#contributor-license-agreement","text":"Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.","title":"Contributor License Agreement"},{"location":"contributing/#code-reviews","text":"All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Code reviews"},{"location":"updating/","text":"Updating & releasing Accompanist \u00b6 This doc is mostly for maintainers. New features & bugfixes \u00b6 All new features should be uploaded as PRs against the main branch. Once merged into main , they should be merged into the snapshot branch: git checkout main && git pull git checkout snapshot && git pull # Create branch for PR git checkout -b snapshot_main_merge # Merge in the main branch git merge main # Push to GitHub Jetpack Compose Snapshots \u00b6 We publish snapshot versions of Accompanist, which depend on a SNAPSHOT versions of Jetpack Compose. These are built from the snapshot branch. Updating to a newer Compose snapshot \u00b6 As mentioned above, updating to a new Compose snapshot is done by submitting a new PR against the snapshot branch: git checkout snapshot && git pull # Create branch for PR git checkout -b update_snapshot Now edit the project to depend on the new Compose SNAPSHOT version: Edit dependencies.kt : Update the Libs.AndroidX.Compose.snapshot property to be the snapshot number Ensure that the Libs.AndroidX.Compose.version property is correct Make sure the project builds and test pass: ./gradlew check Now git commit the changes and push to GitHub. Finally create a PR (with the base branch as snapshot ) and send for review. Releasing \u00b6 Once the next Jetpack Compose version is out, we're ready to push a new release: #1: Merge snapshot into main \u00b6 First we merge the snapshot branch into main : git checkout snapshot && git pull git checkout main && git pull # Create branch for PR git checkout -b main_snapshot_merge # Merge in the snapshot branch git merge snapshot #2: Update dependencies \u00b6 Edit dependencies.kt : Update the Libs.AndroidX.Compose.snapshot property to be an empty string ( val snapshot = \"\" ) Update the Libs.AndroidX.Compose.version property to the new Compose version ( 1.0.0-alpha03 for example). Make sure the project builds and test pass: ./gradlew check Commit the changes. #3: Bump the version number \u00b6 Edit gradle.properties : Update the VERSION_NAME property and remove the -SNAPSHOT suffix. Commit the changes, using the commit message containing the new version name. #4: Push to GitHub \u00b6 Push the branch to GitHub and create a PR against the main branch, and send for review. Once approved and merged, it will be automatically deployed to Maven Central. #5: Create release \u00b6 Once the above PR has been approved and merged, we need to create the GitHub release: Open up the Releases page. At the top you should see a 'Draft' release, auto populated with any PRs since the last release. Click 'Edit'. Make sure that the version number matches what we released (the tool guesses but is not always correct). Double check everything, then press 'Publish release'. At this point the release is published. This will trigger the docs action to run, which will auto-deploy a new version of the website . #6: Prepare the next development version \u00b6 The current release is now finished, but we need to update the version for the next development version: Edit gradle.properties : Update the VERSION_NAME property, by increasing the version number, and adding the -SNAPSHOT suffix. Example: released version: 0.3.0 . Update to 0.3.1-SNAPSHOT git commit and push to main . Finally, merge all of these changes back to snapshot : git checkout snapshot && git pull git merge main git push","title":"Update guide"},{"location":"updating/#updating-releasing-accompanist","text":"This doc is mostly for maintainers.","title":"Updating &amp; releasing Accompanist"},{"location":"updating/#new-features-bugfixes","text":"All new features should be uploaded as PRs against the main branch. Once merged into main , they should be merged into the snapshot branch: git checkout main && git pull git checkout snapshot && git pull # Create branch for PR git checkout -b snapshot_main_merge # Merge in the main branch git merge main # Push to GitHub","title":"New features &amp; bugfixes"},{"location":"updating/#jetpack-compose-snapshots","text":"We publish snapshot versions of Accompanist, which depend on a SNAPSHOT versions of Jetpack Compose. These are built from the snapshot branch.","title":"Jetpack Compose Snapshots"},{"location":"updating/#updating-to-a-newer-compose-snapshot","text":"As mentioned above, updating to a new Compose snapshot is done by submitting a new PR against the snapshot branch: git checkout snapshot && git pull # Create branch for PR git checkout -b update_snapshot Now edit the project to depend on the new Compose SNAPSHOT version: Edit dependencies.kt : Update the Libs.AndroidX.Compose.snapshot property to be the snapshot number Ensure that the Libs.AndroidX.Compose.version property is correct Make sure the project builds and test pass: ./gradlew check Now git commit the changes and push to GitHub. Finally create a PR (with the base branch as snapshot ) and send for review.","title":"Updating to a newer Compose snapshot"},{"location":"updating/#releasing","text":"Once the next Jetpack Compose version is out, we're ready to push a new release:","title":"Releasing"},{"location":"updating/#1-merge-snapshot-into-main","text":"First we merge the snapshot branch into main : git checkout snapshot && git pull git checkout main && git pull # Create branch for PR git checkout -b main_snapshot_merge # Merge in the snapshot branch git merge snapshot","title":"#1: Merge snapshot into main"},{"location":"updating/#2-update-dependencies","text":"Edit dependencies.kt : Update the Libs.AndroidX.Compose.snapshot property to be an empty string ( val snapshot = \"\" ) Update the Libs.AndroidX.Compose.version property to the new Compose version ( 1.0.0-alpha03 for example). Make sure the project builds and test pass: ./gradlew check Commit the changes.","title":"#2: Update dependencies"},{"location":"updating/#3-bump-the-version-number","text":"Edit gradle.properties : Update the VERSION_NAME property and remove the -SNAPSHOT suffix. Commit the changes, using the commit message containing the new version name.","title":"#3: Bump the version number"},{"location":"updating/#4-push-to-github","text":"Push the branch to GitHub and create a PR against the main branch, and send for review. Once approved and merged, it will be automatically deployed to Maven Central.","title":"#4: Push to GitHub"},{"location":"updating/#5-create-release","text":"Once the above PR has been approved and merged, we need to create the GitHub release: Open up the Releases page. At the top you should see a 'Draft' release, auto populated with any PRs since the last release. Click 'Edit'. Make sure that the version number matches what we released (the tool guesses but is not always correct). Double check everything, then press 'Publish release'. At this point the release is published. This will trigger the docs action to run, which will auto-deploy a new version of the website .","title":"#5: Create release"},{"location":"updating/#6-prepare-the-next-development-version","text":"The current release is now finished, but we need to update the version for the next development version: Edit gradle.properties : Update the VERSION_NAME property, by increasing the version number, and adding the -SNAPSHOT suffix. Example: released version: 0.3.0 . Update to 0.3.1-SNAPSHOT git commit and push to main . Finally, merge all of these changes back to snapshot : git checkout snapshot && git pull git merge main git push","title":"#6: Prepare the next development version"},{"location":"using-snapshot-version/","text":"Using a Snapshot Version of the Library \u00b6 If you would like to depend on the cutting edge version of the Accompanist library, you can use the snapshot versions that are published to Sonatype OSSRH 's snapshot repository. These are updated on every commit to main . To do so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXX-SNAPSHOT' } You might see a number of different versioned snapshots. If we use an example: 0.3.0-SNAPSHOT is a build from the main branch, and depends on the latest tagged Jetpack Compose release (i.e. alpha03 ). 0.3.0.compose-6574163-SNAPSHOT is a build from the snapshot branch. This depends on the SNAPSHOT build of Jetpack Compose from build 6574163 . You should only use these if you are using Jetpack Compose snapshot versions (see below). Using Jetpack Compose Snapshots \u00b6 If you're using SNAPSHOT versions of the androidx.compose libraries, you might run into issues with the current stable Accompanist release forcing an older version of those libraries. We publish snapshot versions of Accompanist which depend on recent Jetpack Compose SNAPSHOT repositories. To find a recent build, look through the snapshot repository for any versions in the scheme x.x.x.compose-YYYY-SNAPSHOT (for example: 0.3.0.compose-6574163-SNAPSHOT ). The YYYY in the scheme is the snapshot build being used from AndroidX (from the example: build 6574163 ). You can then use it like so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXXX.compose-YYYYY-SNAPSHOT' } These builds are updated regularly, but there's no guarantee that we will create one for a given snapshot number. Note: you might also see versions in the scheme x.x.x.ui-YYYY-SNAPSHOT . These are the same, just using an older suffix.","title":"Snapshots"},{"location":"using-snapshot-version/#using-a-snapshot-version-of-the-library","text":"If you would like to depend on the cutting edge version of the Accompanist library, you can use the snapshot versions that are published to Sonatype OSSRH 's snapshot repository. These are updated on every commit to main . To do so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXX-SNAPSHOT' } You might see a number of different versioned snapshots. If we use an example: 0.3.0-SNAPSHOT is a build from the main branch, and depends on the latest tagged Jetpack Compose release (i.e. alpha03 ). 0.3.0.compose-6574163-SNAPSHOT is a build from the snapshot branch. This depends on the SNAPSHOT build of Jetpack Compose from build 6574163 . You should only use these if you are using Jetpack Compose snapshot versions (see below).","title":"Using a Snapshot Version of the Library"},{"location":"using-snapshot-version/#using-jetpack-compose-snapshots","text":"If you're using SNAPSHOT versions of the androidx.compose libraries, you might run into issues with the current stable Accompanist release forcing an older version of those libraries. We publish snapshot versions of Accompanist which depend on recent Jetpack Compose SNAPSHOT repositories. To find a recent build, look through the snapshot repository for any versions in the scheme x.x.x.compose-YYYY-SNAPSHOT (for example: 0.3.0.compose-6574163-SNAPSHOT ). The YYYY in the scheme is the snapshot build being used from AndroidX (from the example: build 6574163 ). You can then use it like so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXXX.compose-YYYYY-SNAPSHOT' } These builds are updated regularly, but there's no guarantee that we will create one for a given snapshot number. Note: you might also see versions in the scheme x.x.x.ui-YYYY-SNAPSHOT . These are the same, just using an older suffix.","title":"Using Jetpack Compose Snapshots"},{"location":"api/coil/","text":"// coil coil \u00b6 Packages \u00b6 Name Summary dev.chrisbanes.accompanist.coil","title":"Coil"},{"location":"api/coil/#coil","text":"","title":"coil"},{"location":"api/coil/#packages","text":"Name Summary dev.chrisbanes.accompanist.coil","title":"Packages"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/","text":"// coil / dev.chrisbanes.accompanist.coil Package dev.chrisbanes.accompanist.coil \u00b6 Types \u00b6 Name Summary ErrorResult Indicates that an error occurred while executing the request. Content data class ErrorResult ( image : ImageAsset?, throwable : Throwable ) : RequestResult ImageLoadingColorMatrix An extension to ColorMatrix which implements the Material Design image loading pattern. Content class ImageLoadingColorMatrix ( saturation : Float , alpha : Float , brightness : Float ) : ColorMatrix RequestResult Represents the result of an image request. Content sealed class RequestResult SuccessResult Indicates that the request completed successfully. Content data class SuccessResult ( image : ImageAsset, source : DataSource) : RequestResult Functions \u00b6 Name Summary CoilImage Creates a composable that will attempt to load the given request using Coil, and then display the result in the provided image content.This version of the function allows complete control over how the loaded image is displayed, by being able to provide custom layout:CoilImage( data = resourceUri(R.raw.sample), ) { result -> FancyImage(asset = result.image) } Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?, image: ( SuccessResult ) -> Unit ) Creates a composable that will attempt to load the given data using Coil, and then display the result in the provided image content.This version of the function allows complete control over how the loaded image is displayed, by being able to provide custom layout:CoilImage( data = resourceUri(R.raw.sample), ) { result -> FancyImage(asset = result.image) } Content @Composable() fun CoilImage (data: Any , modifier: Modifier, imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?, image: ( SuccessResult ) -> Unit ) Creates a composable that will attempt to load the given request using Coil, and then display the result in an Image. Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?) Creates a composable that will attempt to load the given data using Coil, and then display the result in an Image. Content @Composable() fun CoilImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?) CoilImageWithCrossfade Content @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~request~~~~:~~ ImageRequest~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ ( RequestResult , IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ ( RequestResult ) -> Unit ~~,~~ ~~error~~~~:~~ ( ErrorResult ) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~ @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~data~~~~:~~ Any ~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ ( RequestResult , IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ ( RequestResult ) -> Unit ~~,~~ ~~error~~~~:~~ ( ErrorResult ) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~ MaterialLoadingImage A wrapper around Image which implements the Material Image Loading pattern. Content @Composable() fun MaterialLoadingImage (asset: ImageAsset, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) @Composable() fun MaterialLoadingImage (result: SuccessResult , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, skipFadeWhenLoadedFromMemory: Boolean , fadeInEnabled: Boolean , fadeInDurationMs: Int )","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/#package-devchrisbanesaccompanistcoil","text":"","title":"Package dev.chrisbanes.accompanist.coil"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/#types","text":"Name Summary ErrorResult Indicates that an error occurred while executing the request. Content data class ErrorResult ( image : ImageAsset?, throwable : Throwable ) : RequestResult ImageLoadingColorMatrix An extension to ColorMatrix which implements the Material Design image loading pattern. Content class ImageLoadingColorMatrix ( saturation : Float , alpha : Float , brightness : Float ) : ColorMatrix RequestResult Represents the result of an image request. Content sealed class RequestResult SuccessResult Indicates that the request completed successfully. Content data class SuccessResult ( image : ImageAsset, source : DataSource) : RequestResult","title":"Types"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/#functions","text":"Name Summary CoilImage Creates a composable that will attempt to load the given request using Coil, and then display the result in the provided image content.This version of the function allows complete control over how the loaded image is displayed, by being able to provide custom layout:CoilImage( data = resourceUri(R.raw.sample), ) { result -> FancyImage(asset = result.image) } Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?, image: ( SuccessResult ) -> Unit ) Creates a composable that will attempt to load the given data using Coil, and then display the result in the provided image content.This version of the function allows complete control over how the loaded image is displayed, by being able to provide custom layout:CoilImage( data = resourceUri(R.raw.sample), ) { result -> FancyImage(asset = result.image) } Content @Composable() fun CoilImage (data: Any , modifier: Modifier, imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?, image: ( SuccessResult ) -> Unit ) Creates a composable that will attempt to load the given request using Coil, and then display the result in an Image. Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?) Creates a composable that will attempt to load the given data using Coil, and then display the result in an Image. Content @Composable() fun CoilImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?) CoilImageWithCrossfade Content @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~request~~~~:~~ ImageRequest~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ ( RequestResult , IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ ( RequestResult ) -> Unit ~~,~~ ~~error~~~~:~~ ( ErrorResult ) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~ @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~data~~~~:~~ Any ~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ ( RequestResult , IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ ( RequestResult ) -> Unit ~~,~~ ~~error~~~~:~~ ( ErrorResult ) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~ MaterialLoadingImage A wrapper around Image which implements the Material Image Loading pattern. Content @Composable() fun MaterialLoadingImage (asset: ImageAsset, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) @Composable() fun MaterialLoadingImage (result: SuccessResult , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, skipFadeWhenLoadedFromMemory: Boolean , fadeInEnabled: Boolean , fadeInDurationMs: Int )","title":"Functions"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-with-crossfade/","text":"// coil / dev.chrisbanes.accompanist.coil / CoilImageWithCrossfade CoilImageWithCrossfade \u00b6 Content @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~data~~~~:~~ Any ~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ ( RequestResult , IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ ( RequestResult ) -> Unit ~~,~~ ~~error~~~~:~~ ( ErrorResult ) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~ @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~request~~~~:~~ ImageRequest~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ ( RequestResult , IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ ( RequestResult ) -> Unit ~~,~~ ~~error~~~~:~~ ( ErrorResult ) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~","title":" coil image with crossfade"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-with-crossfade/#coilimagewithcrossfade","text":"Content @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~data~~~~:~~ Any ~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ ( RequestResult , IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ ( RequestResult ) -> Unit ~~,~~ ~~error~~~~:~~ ( ErrorResult ) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~ @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~request~~~~:~~ ImageRequest~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ ( RequestResult , IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ ( RequestResult ) -> Unit ~~,~~ ~~error~~~~:~~ ( ErrorResult ) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~","title":"CoilImageWithCrossfade"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/","text":"// coil / dev.chrisbanes.accompanist.coil / CoilImage CoilImage \u00b6 Creates a composable that will attempt to load the given data using Coil, and then display the result in the provided image content. This version of the function allows complete control over how the loaded image is displayed, by being able to provide custom layout: CoilImage( data = resourceUri(R.raw.sample), ) { result -> FancyImage(asset = result.image) } Parameters \u00b6 Name Summary data The data to load. See ImageRequest.Builder.data for the types allowed. error Content to be displayed when the request failed. image Content to be displayed when the request is successful. imageLoader The ImageLoader to use when requesting the image. Defaults to Coil's default image loader. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (data: Any , modifier: Modifier, imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?, image: ( SuccessResult ) -> Unit ) Creates a composable that will attempt to load the given request using Coil, and then display the result in the provided image content. This version of the function allows complete control over how the loaded image is displayed, by being able to provide custom layout: CoilImage( data = resourceUri(R.raw.sample), ) { result -> FancyImage(asset = result.image) } Parameters \u00b6 Name Summary error Content to be displayed when the request failed. image Content to be displayed when the request is successful. imageLoader The ImageLoader to use when requesting the image. Defaults to Coil's default image loader. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. request The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?, image: ( SuccessResult ) -> Unit ) Creates a composable that will attempt to load the given data using Coil, and then display the result in an Image. Parameters \u00b6 Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. data The data to load. See ImageRequest.Builder.data for the types allowed. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. imageLoader The ImageLoader to use when requesting the image. Defaults to Coil's default image loader. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?) Creates a composable that will attempt to load the given request using Coil, and then display the result in an Image. Parameters \u00b6 Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. imageLoader The ImageLoader to use when requesting the image. Defaults to Coil's default image loader. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. request The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?)","title":" coil image"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#coilimage","text":"Creates a composable that will attempt to load the given data using Coil, and then display the result in the provided image content. This version of the function allows complete control over how the loaded image is displayed, by being able to provide custom layout: CoilImage( data = resourceUri(R.raw.sample), ) { result -> FancyImage(asset = result.image) }","title":"CoilImage"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#parameters","text":"Name Summary data The data to load. See ImageRequest.Builder.data for the types allowed. error Content to be displayed when the request failed. image Content to be displayed when the request is successful. imageLoader The ImageLoader to use when requesting the image. Defaults to Coil's default image loader. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (data: Any , modifier: Modifier, imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?, image: ( SuccessResult ) -> Unit ) Creates a composable that will attempt to load the given request using Coil, and then display the result in the provided image content. This version of the function allows complete control over how the loaded image is displayed, by being able to provide custom layout: CoilImage( data = resourceUri(R.raw.sample), ) { result -> FancyImage(asset = result.image) }","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#parameters_1","text":"Name Summary error Content to be displayed when the request failed. image Content to be displayed when the request is successful. imageLoader The ImageLoader to use when requesting the image. Defaults to Coil's default image loader. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. request The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?, image: ( SuccessResult ) -> Unit ) Creates a composable that will attempt to load the given data using Coil, and then display the result in an Image.","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#parameters_2","text":"Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. data The data to load. See ImageRequest.Builder.data for the types allowed. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. imageLoader The ImageLoader to use when requesting the image. Defaults to Coil's default image loader. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?) Creates a composable that will attempt to load the given request using Coil, and then display the result in an Image.","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#parameters_3","text":"Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. imageLoader The ImageLoader to use when requesting the image. Defaults to Coil's default image loader. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. request The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , imageLoader: ImageLoader, shouldRefetchOnSizeChange: ( RequestResult , IntSize) -> Boolean , onRequestCompleted: ( RequestResult ) -> Unit , error: ( ErrorResult ) -> Unit ?, loading: () -> Unit ?)","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-material-loading-image/","text":"// coil / dev.chrisbanes.accompanist.coil / MaterialLoadingImage MaterialLoadingImage \u00b6 A wrapper around Image which implements the Material Image Loading pattern. Parameters \u00b6 Name Summary alignment Optional alignment parameter used to place the ImageAsset in the given bounds defined by the width and height. asset The ImageAsset to draw. clock The AnimationClockObservable to use for running animations. colorFilter Optional ColorFilter to apply for the ImageAsset when it is rendered onscreen contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the ImageAsset. fadeInDurationMs The duration of the fade-in animation in milliseconds. fadeInEnabled Whether the fade-in animation should be used or not. modifier Modifier used to adjust the layout algorithm or draw decoration content (ex. background) Content @Composable() fun MaterialLoadingImage (asset: ImageAsset, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) A wrapper around Image which implements the Material Image Loading pattern. Parameters \u00b6 Name Summary alignment Optional alignment parameter used to place the ImageAsset in the given bounds defined by the width and height. clock The AnimationClockObservable to use for running animations. colorFilter Optional ColorFilter to apply for the ImageAsset when it is rendered onscreen contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the ImageAsset. fadeInDurationMs The duration of the fade-in animation in milliseconds. fadeInEnabled Whether the fade-in animation should be used or not. modifier Modifier used to adjust the layout algorithm or draw decoration content (ex. background) result The SuccessResult instance provided by CoilImage . skipFadeWhenLoadedFromMemory Whether the fade animation should be skipped when the result has been loaded from memory. Content @Composable() fun MaterialLoadingImage (result: SuccessResult , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, skipFadeWhenLoadedFromMemory: Boolean , fadeInEnabled: Boolean , fadeInDurationMs: Int )","title":" material loading image"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-material-loading-image/#materialloadingimage","text":"A wrapper around Image which implements the Material Image Loading pattern.","title":"MaterialLoadingImage"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-material-loading-image/#parameters","text":"Name Summary alignment Optional alignment parameter used to place the ImageAsset in the given bounds defined by the width and height. asset The ImageAsset to draw. clock The AnimationClockObservable to use for running animations. colorFilter Optional ColorFilter to apply for the ImageAsset when it is rendered onscreen contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the ImageAsset. fadeInDurationMs The duration of the fade-in animation in milliseconds. fadeInEnabled Whether the fade-in animation should be used or not. modifier Modifier used to adjust the layout algorithm or draw decoration content (ex. background) Content @Composable() fun MaterialLoadingImage (asset: ImageAsset, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) A wrapper around Image which implements the Material Image Loading pattern.","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-material-loading-image/#parameters_1","text":"Name Summary alignment Optional alignment parameter used to place the ImageAsset in the given bounds defined by the width and height. clock The AnimationClockObservable to use for running animations. colorFilter Optional ColorFilter to apply for the ImageAsset when it is rendered onscreen contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the ImageAsset. fadeInDurationMs The duration of the fade-in animation in milliseconds. fadeInEnabled Whether the fade-in animation should be used or not. modifier Modifier used to adjust the layout algorithm or draw decoration content (ex. background) result The SuccessResult instance provided by CoilImage . skipFadeWhenLoadedFromMemory Whether the fade animation should be skipped when the result has been loaded from memory. Content @Composable() fun MaterialLoadingImage (result: SuccessResult , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, skipFadeWhenLoadedFromMemory: Boolean , fadeInEnabled: Boolean , fadeInDurationMs: Int )","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/","text":"// coil / dev.chrisbanes.accompanist.coil / ErrorResult ErrorResult \u00b6 Indicates that an error occurred while executing the request. data class ErrorResult ( image : ImageAsset?, throwable : Throwable ) : RequestResult Parameters \u00b6 Name Summary image The error image. throwable The error that failed the request. Constructors \u00b6 Name Summary ErrorResult The error image.fun ErrorResult (image: ImageAsset?, throwable: Throwable ) Functions \u00b6 Name Summary component1 Content operator fun component1 (): ImageAsset? component2 Content operator fun component2 (): Throwable copy Content fun copy (image: ImageAsset?, throwable: Throwable ): ErrorResult equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary image The error image.open override val image : ImageAsset? throwable The error that failed the request.val throwable : Throwable","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/#errorresult","text":"Indicates that an error occurred while executing the request. data class ErrorResult ( image : ImageAsset?, throwable : Throwable ) : RequestResult","title":"ErrorResult"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/#parameters","text":"Name Summary image The error image. throwable The error that failed the request.","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/#constructors","text":"Name Summary ErrorResult The error image.fun ErrorResult (image: ImageAsset?, throwable: Throwable )","title":"Constructors"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/#functions","text":"Name Summary component1 Content operator fun component1 (): ImageAsset? component2 Content operator fun component2 (): Throwable copy Content fun copy (image: ImageAsset?, throwable: Throwable ): ErrorResult equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/#properties","text":"Name Summary image The error image.open override val image : ImageAsset? throwable The error that failed the request.val throwable : Throwable","title":"Properties"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/-error-result/","text":"// coil / dev.chrisbanes.accompanist.coil / ErrorResult / ErrorResult ErrorResult \u00b6 Parameters \u00b6 Name Summary image The error image. throwable The error that failed the request. Content fun ErrorResult (image: ImageAsset?, throwable: Throwable )","title":" error result"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/-error-result/#errorresult","text":"","title":"ErrorResult"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/-error-result/#parameters","text":"Name Summary image The error image. throwable The error that failed the request. Content fun ErrorResult (image: ImageAsset?, throwable: Throwable )","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/component1/","text":"// coil / dev.chrisbanes.accompanist.coil / ErrorResult / component1 component1 \u00b6 Content operator fun component1 (): ImageAsset?","title":"Component1"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/component1/#component1","text":"Content operator fun component1 (): ImageAsset?","title":"component1"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/component2/","text":"// coil / dev.chrisbanes.accompanist.coil / ErrorResult / component2 component2 \u00b6 Content operator fun component2 (): Throwable","title":"Component2"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/component2/#component2","text":"Content operator fun component2 (): Throwable","title":"component2"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/copy/","text":"// coil / dev.chrisbanes.accompanist.coil / ErrorResult / copy copy \u00b6 Content fun copy (image: ImageAsset?, throwable: Throwable ): ErrorResult","title":"Copy"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-error-result/copy/#copy","text":"Content fun copy (image: ImageAsset?, throwable: Throwable ): ErrorResult","title":"copy"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/","text":"// coil / dev.chrisbanes.accompanist.coil / ImageLoadingColorMatrix ImageLoadingColorMatrix \u00b6 An extension to ColorMatrix which implements the Material Design image loading pattern. class ImageLoadingColorMatrix ( saturation : Float , alpha : Float , brightness : Float ) : ColorMatrix See also \u00b6 Name Summary https ://material.io/archive/guidelines/patterns/loading-images.html Constructors \u00b6 Name Summary ImageLoadingColorMatrix fun ImageLoadingColorMatrix (saturation: Float , alpha: Float , brightness: Float ) Functions \u00b6 Name Summary equals Content open operator override fun equals (other: Any ?): Boolean getArray Content override fun getArray (): FloatArray hashCode Content open override fun hashCode (): Int postConcat Content open override fun postConcat (p0: ColorMatrix ) preConcat Content open override fun preConcat (p0: ColorMatrix ) reset Content open override fun reset () set Content open override fun set (p0: ColorMatrix ) open override fun set (p0: FloatArray ) setConcat Content open override fun setConcat (p0: ColorMatrix , p1: ColorMatrix ) setRGB2YUV Content open override fun setRGB2YUV () setRotate Content open override fun setRotate (p0: Int , p1: Float ) setSaturation Content open override fun setSaturation (p0: Float ) setScale Content open override fun setScale (p0: Float , p1: Float , p2: Float , p3: Float ) setYUV2RGB Content open override fun setYUV2RGB () toString Content open override fun toString (): String Properties \u00b6 Name Summary alphaFraction var alphaFraction : Float brightnessFraction var brightnessFraction : Float saturationFraction var saturationFraction : Float","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/#imageloadingcolormatrix","text":"An extension to ColorMatrix which implements the Material Design image loading pattern. class ImageLoadingColorMatrix ( saturation : Float , alpha : Float , brightness : Float ) : ColorMatrix","title":"ImageLoadingColorMatrix"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/#see-also","text":"Name Summary https ://material.io/archive/guidelines/patterns/loading-images.html","title":"See also"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/#constructors","text":"Name Summary ImageLoadingColorMatrix fun ImageLoadingColorMatrix (saturation: Float , alpha: Float , brightness: Float )","title":"Constructors"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/#functions","text":"Name Summary equals Content open operator override fun equals (other: Any ?): Boolean getArray Content override fun getArray (): FloatArray hashCode Content open override fun hashCode (): Int postConcat Content open override fun postConcat (p0: ColorMatrix ) preConcat Content open override fun preConcat (p0: ColorMatrix ) reset Content open override fun reset () set Content open override fun set (p0: ColorMatrix ) open override fun set (p0: FloatArray ) setConcat Content open override fun setConcat (p0: ColorMatrix , p1: ColorMatrix ) setRGB2YUV Content open override fun setRGB2YUV () setRotate Content open override fun setRotate (p0: Int , p1: Float ) setSaturation Content open override fun setSaturation (p0: Float ) setScale Content open override fun setScale (p0: Float , p1: Float , p2: Float , p3: Float ) setYUV2RGB Content open override fun setYUV2RGB () toString Content open override fun toString (): String","title":"Functions"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/#properties","text":"Name Summary alphaFraction var alphaFraction : Float brightnessFraction var brightnessFraction : Float saturationFraction var saturationFraction : Float","title":"Properties"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/-image-loading-color-matrix/","text":"// coil / dev.chrisbanes.accompanist.coil / ImageLoadingColorMatrix / ImageLoadingColorMatrix ImageLoadingColorMatrix \u00b6 Content fun ImageLoadingColorMatrix (saturation: Float , alpha: Float , brightness: Float )","title":" image loading color matrix"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-image-loading-color-matrix/-image-loading-color-matrix/#imageloadingcolormatrix","text":"Content fun ImageLoadingColorMatrix (saturation: Float , alpha: Float , brightness: Float )","title":"ImageLoadingColorMatrix"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-request-result/","text":"// coil / dev.chrisbanes.accompanist.coil / RequestResult RequestResult \u00b6 Represents the result of an image request. sealed class RequestResult Functions \u00b6 Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary image abstract val image : ImageAsset? Inheritors \u00b6 Name SuccessResult ErrorResult","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-request-result/#requestresult","text":"Represents the result of an image request. sealed class RequestResult","title":"RequestResult"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-request-result/#functions","text":"Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-request-result/#properties","text":"Name Summary image abstract val image : ImageAsset?","title":"Properties"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-request-result/#inheritors","text":"Name SuccessResult ErrorResult","title":"Inheritors"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/","text":"// coil / dev.chrisbanes.accompanist.coil / SuccessResult SuccessResult \u00b6 Indicates that the request completed successfully. data class SuccessResult ( image : ImageAsset, source : DataSource) : RequestResult Parameters \u00b6 Name Summary image The result image. source The data source that the image was loaded from. Constructors \u00b6 Name Summary SuccessResult The result image.fun SuccessResult (image: ImageAsset, source: DataSource) Functions \u00b6 Name Summary component1 Content operator fun component1 (): ImageAsset component2 Content operator fun component2 (): DataSource copy Content fun copy (image: ImageAsset, source: DataSource): SuccessResult equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary image The result image.open override val image : ImageAsset source The data source that the image was loaded from.val source : DataSource","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/#successresult","text":"Indicates that the request completed successfully. data class SuccessResult ( image : ImageAsset, source : DataSource) : RequestResult","title":"SuccessResult"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/#parameters","text":"Name Summary image The result image. source The data source that the image was loaded from.","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/#constructors","text":"Name Summary SuccessResult The result image.fun SuccessResult (image: ImageAsset, source: DataSource)","title":"Constructors"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/#functions","text":"Name Summary component1 Content operator fun component1 (): ImageAsset component2 Content operator fun component2 (): DataSource copy Content fun copy (image: ImageAsset, source: DataSource): SuccessResult equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/#properties","text":"Name Summary image The result image.open override val image : ImageAsset source The data source that the image was loaded from.val source : DataSource","title":"Properties"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/-success-result/","text":"// coil / dev.chrisbanes.accompanist.coil / SuccessResult / SuccessResult SuccessResult \u00b6 Parameters \u00b6 Name Summary image The result image. source The data source that the image was loaded from. Content fun SuccessResult (image: ImageAsset, source: DataSource)","title":" success result"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/-success-result/#successresult","text":"","title":"SuccessResult"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/-success-result/#parameters","text":"Name Summary image The result image. source The data source that the image was loaded from. Content fun SuccessResult (image: ImageAsset, source: DataSource)","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/component1/","text":"// coil / dev.chrisbanes.accompanist.coil / SuccessResult / component1 component1 \u00b6 Content operator fun component1 (): ImageAsset","title":"Component1"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/component1/#component1","text":"Content operator fun component1 (): ImageAsset","title":"component1"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/component2/","text":"// coil / dev.chrisbanes.accompanist.coil / SuccessResult / component2 component2 \u00b6 Content operator fun component2 (): DataSource","title":"Component2"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/component2/#component2","text":"Content operator fun component2 (): DataSource","title":"component2"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/copy/","text":"// coil / dev.chrisbanes.accompanist.coil / SuccessResult / copy copy \u00b6 Content fun copy (image: ImageAsset, source: DataSource): SuccessResult","title":"Copy"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-success-result/copy/#copy","text":"Content fun copy (image: ImageAsset, source: DataSource): SuccessResult","title":"copy"}]}