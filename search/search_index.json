{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Accompanist is a group of libraries that contains some utilities which I've found myself copying around projects which use Jetpack Compose . Currently, it contains: Image loading \u00b6 A number of libraries which integrate popular image loading libraries into Jetpack Compose: \ud83d\uddbc\ufe0f Coil image loading composables \ud83d\uddbc\ufe0f Picasso image loading composables \ud83d\uddbc\ufe0f Glide image loading composables \ud83d\udcd0 Insets \u00b6 A library which brings WindowInsets support to Jetpack Compose. Jetpack Compose is a fast-moving project and I'll be updating these libraries to match the latest tagged release as quickly as possible. Each release listing will outline what version of Compose libraries it depends on. Accompanist Snapshots \u00b6 Snapshots of the current development version of Accompanist are available, which track the latest commit. See here for more information. Why the name? \u00b6 The library is all about adding some utilities around Compose. Music composing is done by a composer, and since this library is about supporting composition, the supporting role of an accompanist felt like a good name. Contributions \u00b6 Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though. License \u00b6 Copyright 2020 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#image-loading","text":"A number of libraries which integrate popular image loading libraries into Jetpack Compose: \ud83d\uddbc\ufe0f Coil image loading composables \ud83d\uddbc\ufe0f Picasso image loading composables \ud83d\uddbc\ufe0f Glide image loading composables","title":"Image loading"},{"location":"#insets","text":"A library which brings WindowInsets support to Jetpack Compose. Jetpack Compose is a fast-moving project and I'll be updating these libraries to match the latest tagged release as quickly as possible. Each release listing will outline what version of Compose libraries it depends on.","title":"\ud83d\udcd0 Insets"},{"location":"#accompanist-snapshots","text":"Snapshots of the current development version of Accompanist are available, which track the latest commit. See here for more information.","title":"Accompanist Snapshots"},{"location":"#why-the-name","text":"The library is all about adding some utilities around Compose. Music composing is done by a composer, and since this library is about supporting composition, the supporting role of an accompanist felt like a good name.","title":"Why the name?"},{"location":"#contributions","text":"Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.","title":"Contributions"},{"location":"#license","text":"Copyright 2020 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"coil/","text":"Coil for Jetpack Compose \u00b6 This library brings easy-to-use composable which can fetch and display images from external sources, such as network, using the Coil image loading library. CoilImage() \u00b6 The primary API is via the CoilImage() functions. There are a number of function versions available. The simplest usage is like so: CoilImage ( data = \"https://picsum.photos/300/300\" ) This loads the data passed in with Coil , and then displays the resulting image using the standard Image composable. You can also customize the Coil ImageRequest through the requestBuilder parameter. This allows usage of things like (but not limited to) transformations: CoilImage ( data = \"https://picsum.photos/300/300\" , requestBuilder = { transformations ( CircleCropTransformation ()) }, ) It also provides optional content 'slots', allowing you to provide custom content to be displayed when the request is loading, and/or if the image request failed: CoilImage ( data = \"https://picsum.photos/300/300\" , loading = { Box ( Modifier . matchParentSize ()) { CircularProgressIndicator ( Modifier . align ( Alignment . Center )) } }, error = { Image ( asset = imageResource ( R . drawable . ic_error )) } ) Fade-in animation \u00b6 This library has built-in support for animating loaded images in, using a fade-in animation . There are two ways to enable the animation: fadeIn parameter \u00b6 A fadeIn: Boolean parameter has been added to CoilImage (default: false ). When enabled, a default fade-in animation will be used when the image is successfully loaded: CoilImage ( data = \"https://picsum.photos/300/300\" , fadeIn = true ) Custom content \u00b6 If you need more control over the animation, or you want to provide custom layout for the loaded image, you can use the content composable version of CoilImage : CoilImage ( data = \"https://picsum.photos/300/300\" , ) { imageState -> when ( imageState ) { is ImageLoadState . Success -> { MaterialLoadingImage ( result = imageState , fadeInEnabled = true , fadeInDurationMs = 600 , ) } is ImageLoadState . Error -> /* TODO */ ImageLoadState . Loading -> /* TODO */ ImageLoadState . Empty -> /* TODO */ } } GIFs \u00b6 Accompanist Coil supports GIFs through Coil's own GIF support. Follow the setup instructions and it should just work. Custom ImageLoader \u00b6 If you wish to provide a default ImageLoader to use across all of your CoilImage calls, we provide the AmbientImageLoader ambient. You can use it like so: val imageLoader = ImageLoader . Builder ( context ) // customize the ImageLoader as needed . build () Providers ( AmbientImageLoader provides imageLoader ) { // This will automatically use the value of AmbientImageLoader CoilImage ( data = ... ) } For more information on ambients, see here . Download \u00b6 repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-coil:<version>\" } Snapshots of the development version are available in Sonatype's snapshots repository . These are updated on every commit. What's the goal of the library? \u00b6 Eventually the goal is to upstream all of this functionality back to Coil . Jetpack Compose 's development is currently moving very fast, which means that there are frequent API changes between releases. For now, it makes sense to keep this as a seperately released library to track the latest Compose release.","title":"Coil"},{"location":"coil/#coil-for-jetpack-compose","text":"This library brings easy-to-use composable which can fetch and display images from external sources, such as network, using the Coil image loading library.","title":"Coil for Jetpack Compose"},{"location":"coil/#coilimage","text":"The primary API is via the CoilImage() functions. There are a number of function versions available. The simplest usage is like so: CoilImage ( data = \"https://picsum.photos/300/300\" ) This loads the data passed in with Coil , and then displays the resulting image using the standard Image composable. You can also customize the Coil ImageRequest through the requestBuilder parameter. This allows usage of things like (but not limited to) transformations: CoilImage ( data = \"https://picsum.photos/300/300\" , requestBuilder = { transformations ( CircleCropTransformation ()) }, ) It also provides optional content 'slots', allowing you to provide custom content to be displayed when the request is loading, and/or if the image request failed: CoilImage ( data = \"https://picsum.photos/300/300\" , loading = { Box ( Modifier . matchParentSize ()) { CircularProgressIndicator ( Modifier . align ( Alignment . Center )) } }, error = { Image ( asset = imageResource ( R . drawable . ic_error )) } )","title":"CoilImage()"},{"location":"coil/#fade-in-animation","text":"This library has built-in support for animating loaded images in, using a fade-in animation . There are two ways to enable the animation:","title":"Fade-in animation"},{"location":"coil/#fadein-parameter","text":"A fadeIn: Boolean parameter has been added to CoilImage (default: false ). When enabled, a default fade-in animation will be used when the image is successfully loaded: CoilImage ( data = \"https://picsum.photos/300/300\" , fadeIn = true )","title":"fadeIn parameter"},{"location":"coil/#custom-content","text":"If you need more control over the animation, or you want to provide custom layout for the loaded image, you can use the content composable version of CoilImage : CoilImage ( data = \"https://picsum.photos/300/300\" , ) { imageState -> when ( imageState ) { is ImageLoadState . Success -> { MaterialLoadingImage ( result = imageState , fadeInEnabled = true , fadeInDurationMs = 600 , ) } is ImageLoadState . Error -> /* TODO */ ImageLoadState . Loading -> /* TODO */ ImageLoadState . Empty -> /* TODO */ } }","title":"Custom content"},{"location":"coil/#gifs","text":"Accompanist Coil supports GIFs through Coil's own GIF support. Follow the setup instructions and it should just work.","title":"GIFs"},{"location":"coil/#custom-imageloader","text":"If you wish to provide a default ImageLoader to use across all of your CoilImage calls, we provide the AmbientImageLoader ambient. You can use it like so: val imageLoader = ImageLoader . Builder ( context ) // customize the ImageLoader as needed . build () Providers ( AmbientImageLoader provides imageLoader ) { // This will automatically use the value of AmbientImageLoader CoilImage ( data = ... ) } For more information on ambients, see here .","title":"Custom ImageLoader"},{"location":"coil/#download","text":"repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-coil:<version>\" } Snapshots of the development version are available in Sonatype's snapshots repository . These are updated on every commit.","title":"Download"},{"location":"coil/#whats-the-goal-of-the-library","text":"Eventually the goal is to upstream all of this functionality back to Coil . Jetpack Compose 's development is currently moving very fast, which means that there are frequent API changes between releases. For now, it makes sense to keep this as a seperately released library to track the latest Compose release.","title":"What's the goal of the library?"},{"location":"contributing/","text":"How to Contribute \u00b6 We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow. Contributor License Agreement \u00b6 Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again. Code reviews \u00b6 All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Contributing"},{"location":"contributing/#how-to-contribute","text":"We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.","title":"How to Contribute"},{"location":"contributing/#contributor-license-agreement","text":"Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.","title":"Contributor License Agreement"},{"location":"contributing/#code-reviews","text":"All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Code reviews"},{"location":"glide/","text":"Glide for Jetpack Compose \u00b6 This library brings easy-to-use composable which can fetch and display images from external sources, such as network, using the Glide image loading library. GlideImage() \u00b6 The primary API is via the GlideImage() functions. There are a number of function versions available. The simplest usage is like so: GlideImage ( data = \"https://picsum.photos/300/300\" ) This loads the data passed in with Glide , and then displays the resulting image using the standard Image composable. You can also customize the Glide RequestBuilder through the requestBuilder parameter. This allows usage of things like (but not limited to) transformations: GlideImage ( data = \"https://picsum.photos/300/300\" , requestBuilder = { val options = RequestOptions () options . centerCrop () apply ( options ) }, ) It also provides optional content 'slots', allowing you to provide custom content to be displayed when the request is loading, and/or if the image request failed: GlideImage ( data = \"https://picsum.photos/300/300\" , loading = { Box ( Modifier . matchParentSize ()) { CircularProgressIndicator ( Modifier . align ( Alignment . Center )) } }, error = { Image ( asset = imageResource ( R . drawable . ic_error )) } ) Fade-in animation \u00b6 This library has built-in support for animating loaded images in, using a fade-in animation . There are two ways to enable the animation: fadeIn parameter \u00b6 A fadeIn: Boolean parameter has been added to GlideImage (default: false ). When enabled, a default fade-in animation will be used when the image is successfully loaded: GlideImage ( data = \"https://picsum.photos/300/300\" , fadeIn = true ) Custom content \u00b6 If you need more control over the animation, or you want to provide custom layout for the loaded image, you can use the content composable version of GlideImage : GlideImage ( data = \"https://picsum.photos/300/300\" , ) { imageState -> when ( imageState ) { is ImageLoadState . Success -> { MaterialLoadingImage ( result = imageState , fadeInEnabled = true , fadeInDurationMs = 600 , ) } is ImageLoadState . Error -> /* TODO */ ImageLoadState . Loading -> /* TODO */ ImageLoadState . Empty -> /* TODO */ } } GIFs \u00b6 Accompanist Glide supports GIFs through Glide's own GIF support. There's nothing you need to do, it should just work. Custom RequestManager \u00b6 If you wish to provide a default RequestManager to use across all of your GlideImage calls, we provide the AmbientRequestManager ambient. You can use it like so: val requestManager = Glide . with (...) // customize the RequestManager as needed . build () Providers ( AmbientRequestManager provides requestManager ) { // This will automatically use the value of AmbientRequestManager GlideImage ( data = ... ) } For more information on ambients, see here . Download \u00b6 repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-glide:<version>\" } Snapshots of the development version are available in Sonatype's snapshots repository . These are updated on every commit.","title":"Glide"},{"location":"glide/#glide-for-jetpack-compose","text":"This library brings easy-to-use composable which can fetch and display images from external sources, such as network, using the Glide image loading library.","title":"Glide for Jetpack Compose"},{"location":"glide/#glideimage","text":"The primary API is via the GlideImage() functions. There are a number of function versions available. The simplest usage is like so: GlideImage ( data = \"https://picsum.photos/300/300\" ) This loads the data passed in with Glide , and then displays the resulting image using the standard Image composable. You can also customize the Glide RequestBuilder through the requestBuilder parameter. This allows usage of things like (but not limited to) transformations: GlideImage ( data = \"https://picsum.photos/300/300\" , requestBuilder = { val options = RequestOptions () options . centerCrop () apply ( options ) }, ) It also provides optional content 'slots', allowing you to provide custom content to be displayed when the request is loading, and/or if the image request failed: GlideImage ( data = \"https://picsum.photos/300/300\" , loading = { Box ( Modifier . matchParentSize ()) { CircularProgressIndicator ( Modifier . align ( Alignment . Center )) } }, error = { Image ( asset = imageResource ( R . drawable . ic_error )) } )","title":"GlideImage()"},{"location":"glide/#fade-in-animation","text":"This library has built-in support for animating loaded images in, using a fade-in animation . There are two ways to enable the animation:","title":"Fade-in animation"},{"location":"glide/#fadein-parameter","text":"A fadeIn: Boolean parameter has been added to GlideImage (default: false ). When enabled, a default fade-in animation will be used when the image is successfully loaded: GlideImage ( data = \"https://picsum.photos/300/300\" , fadeIn = true )","title":"fadeIn parameter"},{"location":"glide/#custom-content","text":"If you need more control over the animation, or you want to provide custom layout for the loaded image, you can use the content composable version of GlideImage : GlideImage ( data = \"https://picsum.photos/300/300\" , ) { imageState -> when ( imageState ) { is ImageLoadState . Success -> { MaterialLoadingImage ( result = imageState , fadeInEnabled = true , fadeInDurationMs = 600 , ) } is ImageLoadState . Error -> /* TODO */ ImageLoadState . Loading -> /* TODO */ ImageLoadState . Empty -> /* TODO */ } }","title":"Custom content"},{"location":"glide/#gifs","text":"Accompanist Glide supports GIFs through Glide's own GIF support. There's nothing you need to do, it should just work.","title":"GIFs"},{"location":"glide/#custom-requestmanager","text":"If you wish to provide a default RequestManager to use across all of your GlideImage calls, we provide the AmbientRequestManager ambient. You can use it like so: val requestManager = Glide . with (...) // customize the RequestManager as needed . build () Providers ( AmbientRequestManager provides requestManager ) { // This will automatically use the value of AmbientRequestManager GlideImage ( data = ... ) } For more information on ambients, see here .","title":"Custom RequestManager"},{"location":"glide/#download","text":"repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-glide:<version>\" } Snapshots of the development version are available in Sonatype's snapshots repository . These are updated on every commit.","title":"Download"},{"location":"insets/","text":"Insets for Jetpack Compose \u00b6 Insets for Jetpack Compose takes a lot of the ideas which drove Insetter for views, and applies them for use in composables. Usage \u00b6 To setup Insets in your composables, you need to call the ProvideWindowInsets function and wrap your content. This would typically be done near the top level of your composable hierarchy: setContent { MaterialTheme { ProvideWindowInsets { // your content } } } Note: Whether ProvideWindowInsets is called outside or within MaterialTheme doesn't particularly matter. ProvideWindowInsets allows the library to set an OnApplyWindowInsetsListener on your content's host view. That listener is used to update the value of an ambient bundled in this library: AmbientWindowInsets . AmbientWindowInsets holds an instance of WindowInsets which contains the value of various WindowInsets types . You can use the values manually like so: @Composable fun ImeAvoidingBox () { val insets = AmbientWindowInsets . current Box ( Modifier . padding ( bottom = insets . ime . bottom )) } ...but we also provide some easy-to-use Modifier s. Modifiers \u00b6 We provide two types of modifiers for easy handling of insets: padding and size. Padding modifiers \u00b6 The padding modifiers allow you to apply padding to a composable which matches a specific type of inset. Currently we provide: Modifier.statusBarsPadding() Modifier.navigationBarsPadding() Modifier.systemBarsPadding() These are commonly used to move composables out from under the system bars. The common example would be a FloatingActionButton : FloatingActionButton ( icon = { Icon (...) }, modifier = Modifier . align ( Alignment . BottomEnd ) . padding ( 16. dp ) // normal 16dp of padding for FABs . navigationBarsPadding () // Move it out from under the nav bar ) Size modifiers \u00b6 The size modifiers allow you to match the size of a composable to a specific type of inset. Currently we provide: Modifier.statusBarsHeight() Modifier.navigationBarsHeight() Modifier.navigationBarsWidth() These are commonly used to allow composables behind the system bars, to provide background protection, or similar: Spacer ( Modifier . background ( Color . Black . copy ( alpha = 0.7f )) . statusBarsHeight () // Match the height of the status bar . fillMaxWidth () ) PaddingValues \u00b6 Compose also provides the concept of PaddingValues , a data class which contains the padding values to be applied on all dimensions (similar to a rect). This is commonly used with container composables, such as LazyColumn , to set the content padding. You may want to use inset values for content padding, so this library provides the Insets.toPaddingValues() extension function to convert between Insets and PaddingValues . Here's an example of using the system bars insets: LazyColumn ( contentPadding = AmbientWindowInsets . current . systemBars . toPaddingValues () ) For a more complex example, see the EdgeToEdgeLazyColumn example: Download \u00b6 repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-insets:<version>\" } Snapshots of the development version are available in Sonatype's snapshots repository . These are updated on every commit.","title":"Insets"},{"location":"insets/#insets-for-jetpack-compose","text":"Insets for Jetpack Compose takes a lot of the ideas which drove Insetter for views, and applies them for use in composables.","title":"Insets for Jetpack Compose"},{"location":"insets/#usage","text":"To setup Insets in your composables, you need to call the ProvideWindowInsets function and wrap your content. This would typically be done near the top level of your composable hierarchy: setContent { MaterialTheme { ProvideWindowInsets { // your content } } } Note: Whether ProvideWindowInsets is called outside or within MaterialTheme doesn't particularly matter. ProvideWindowInsets allows the library to set an OnApplyWindowInsetsListener on your content's host view. That listener is used to update the value of an ambient bundled in this library: AmbientWindowInsets . AmbientWindowInsets holds an instance of WindowInsets which contains the value of various WindowInsets types . You can use the values manually like so: @Composable fun ImeAvoidingBox () { val insets = AmbientWindowInsets . current Box ( Modifier . padding ( bottom = insets . ime . bottom )) } ...but we also provide some easy-to-use Modifier s.","title":"Usage"},{"location":"insets/#modifiers","text":"We provide two types of modifiers for easy handling of insets: padding and size.","title":"Modifiers"},{"location":"insets/#padding-modifiers","text":"The padding modifiers allow you to apply padding to a composable which matches a specific type of inset. Currently we provide: Modifier.statusBarsPadding() Modifier.navigationBarsPadding() Modifier.systemBarsPadding() These are commonly used to move composables out from under the system bars. The common example would be a FloatingActionButton : FloatingActionButton ( icon = { Icon (...) }, modifier = Modifier . align ( Alignment . BottomEnd ) . padding ( 16. dp ) // normal 16dp of padding for FABs . navigationBarsPadding () // Move it out from under the nav bar )","title":"Padding modifiers"},{"location":"insets/#size-modifiers","text":"The size modifiers allow you to match the size of a composable to a specific type of inset. Currently we provide: Modifier.statusBarsHeight() Modifier.navigationBarsHeight() Modifier.navigationBarsWidth() These are commonly used to allow composables behind the system bars, to provide background protection, or similar: Spacer ( Modifier . background ( Color . Black . copy ( alpha = 0.7f )) . statusBarsHeight () // Match the height of the status bar . fillMaxWidth () )","title":"Size modifiers"},{"location":"insets/#paddingvalues","text":"Compose also provides the concept of PaddingValues , a data class which contains the padding values to be applied on all dimensions (similar to a rect). This is commonly used with container composables, such as LazyColumn , to set the content padding. You may want to use inset values for content padding, so this library provides the Insets.toPaddingValues() extension function to convert between Insets and PaddingValues . Here's an example of using the system bars insets: LazyColumn ( contentPadding = AmbientWindowInsets . current . systemBars . toPaddingValues () ) For a more complex example, see the EdgeToEdgeLazyColumn example:","title":"PaddingValues"},{"location":"insets/#download","text":"repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-insets:<version>\" } Snapshots of the development version are available in Sonatype's snapshots repository . These are updated on every commit.","title":"Download"},{"location":"picasso/","text":"Picasso for Jetpack Compose \u00b6 This library brings easy-to-use composable which can fetch and display images from external sources, such as network, using the Picasso v2 image loading library. PicassoImage() \u00b6 The primary API is via the PicassoImage() functions. There are multiple function versions available. The simplest usage is like so: PicassoImage ( data = \"https://picsum.photos/300/300\" ) This loads the data passed in with Picasso , and then displays the resulting image using the standard Image composable. You can also customize the Picasso RequestCreator through the requestBuilder parameter. This allows usage of things like (but not limited to) transformations: PicassoImage ( data = \"https://picsum.photos/300/300\" , requestBuilder = { rotate ( 90f ) } ) It also provides optional content 'slots', allowing you to provide custom content to be displayed when the request is loading, and/or if the image request failed: PicassoImage ( data = \"https://picsum.photos/300/300\" , loading = { Box ( Modifier . matchParentSize ()) { CircularProgressIndicator ( Modifier . align ( Alignment . Center )) } }, error = { Image ( asset = imageResource ( R . drawable . ic_error )) } ) Fade-in animation \u00b6 This library has built-in support for animating loaded images in, using a fade-in animation . There are two ways to enable the animation: fadeIn parameter \u00b6 A fadeIn: Boolean parameter is available on PicassoImage (default: false ). When enabled, a default fade-in animation will be used when the image is successfully loaded: PicassoImage ( data = \"https://picsum.photos/300/300\" , fadeIn = true ) Custom content \u00b6 If you need more control over the animation, or you want to provide custom layout for the loaded image, you can use the content composable version of PicassoImage : PicassoImage ( data = \"https://picsum.photos/300/300\" , ) { imageState -> when ( imageState ) { is ImageLoadState . Success -> { MaterialLoadingImage ( result = imageState , fadeInEnabled = true , fadeInDurationMs = 600 , ) } is ImageLoadState . Error -> /* TODO */ ImageLoadState . Loading -> /* TODO */ ImageLoadState . Empty -> /* TODO */ } } Custom Picasso \u00b6 If you wish to provide a default Picasso to use across all of your PicassoImage calls, we provide the AmbientPicasso ambient. You can use it like so: val picasso = Picasso . Builder (...) // Customize as required . build () Providers ( AmbientPicasso provides picasso ) { // This will automatically use the value of AmbientPicasso PicasoImage ( data = ... ) } For more information on ambients, see here . Download \u00b6 repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-picasso:<version>\" } Snapshots of the development version are available in Sonatype's snapshots repository . These are updated on every commit.","title":"Picasso"},{"location":"picasso/#picasso-for-jetpack-compose","text":"This library brings easy-to-use composable which can fetch and display images from external sources, such as network, using the Picasso v2 image loading library.","title":"Picasso for Jetpack Compose"},{"location":"picasso/#picassoimage","text":"The primary API is via the PicassoImage() functions. There are multiple function versions available. The simplest usage is like so: PicassoImage ( data = \"https://picsum.photos/300/300\" ) This loads the data passed in with Picasso , and then displays the resulting image using the standard Image composable. You can also customize the Picasso RequestCreator through the requestBuilder parameter. This allows usage of things like (but not limited to) transformations: PicassoImage ( data = \"https://picsum.photos/300/300\" , requestBuilder = { rotate ( 90f ) } ) It also provides optional content 'slots', allowing you to provide custom content to be displayed when the request is loading, and/or if the image request failed: PicassoImage ( data = \"https://picsum.photos/300/300\" , loading = { Box ( Modifier . matchParentSize ()) { CircularProgressIndicator ( Modifier . align ( Alignment . Center )) } }, error = { Image ( asset = imageResource ( R . drawable . ic_error )) } )","title":"PicassoImage()"},{"location":"picasso/#fade-in-animation","text":"This library has built-in support for animating loaded images in, using a fade-in animation . There are two ways to enable the animation:","title":"Fade-in animation"},{"location":"picasso/#fadein-parameter","text":"A fadeIn: Boolean parameter is available on PicassoImage (default: false ). When enabled, a default fade-in animation will be used when the image is successfully loaded: PicassoImage ( data = \"https://picsum.photos/300/300\" , fadeIn = true )","title":"fadeIn parameter"},{"location":"picasso/#custom-content","text":"If you need more control over the animation, or you want to provide custom layout for the loaded image, you can use the content composable version of PicassoImage : PicassoImage ( data = \"https://picsum.photos/300/300\" , ) { imageState -> when ( imageState ) { is ImageLoadState . Success -> { MaterialLoadingImage ( result = imageState , fadeInEnabled = true , fadeInDurationMs = 600 , ) } is ImageLoadState . Error -> /* TODO */ ImageLoadState . Loading -> /* TODO */ ImageLoadState . Empty -> /* TODO */ } }","title":"Custom content"},{"location":"picasso/#custom-picasso","text":"If you wish to provide a default Picasso to use across all of your PicassoImage calls, we provide the AmbientPicasso ambient. You can use it like so: val picasso = Picasso . Builder (...) // Customize as required . build () Providers ( AmbientPicasso provides picasso ) { // This will automatically use the value of AmbientPicasso PicasoImage ( data = ... ) } For more information on ambients, see here .","title":"Custom Picasso"},{"location":"picasso/#download","text":"repositories { mavenCentral () } dependencies { implementation \"dev.chrisbanes.accompanist:accompanist-picasso:<version>\" } Snapshots of the development version are available in Sonatype's snapshots repository . These are updated on every commit.","title":"Download"},{"location":"updating/","text":"Updating & releasing Accompanist \u00b6 This doc is mostly for maintainers. New features & bugfixes \u00b6 All new features should be uploaded as PRs against the main branch. Once merged into main , they should be merged into the snapshot branch: git checkout main && git pull git checkout snapshot && git pull # Create branch for PR git checkout -b snapshot_main_merge # Merge in the main branch git merge main # Push to GitHub Jetpack Compose Snapshots \u00b6 We publish snapshot versions of Accompanist, which depend on a SNAPSHOT versions of Jetpack Compose. These are built from the snapshot branch. Updating to a newer Compose snapshot \u00b6 As mentioned above, updating to a new Compose snapshot is done by submitting a new PR against the snapshot branch: git checkout snapshot && git pull # Create branch for PR git checkout -b update_snapshot Now edit the project to depend on the new Compose SNAPSHOT version: Edit dependencies.kt : Update the Libs.AndroidX.Compose.snapshot property to be the snapshot number Ensure that the Libs.AndroidX.Compose.version property is correct Make sure the project builds and test pass: ./gradlew check Now git commit the changes and push to GitHub. Finally create a PR (with the base branch as snapshot ) and send for review. Releasing \u00b6 Once the next Jetpack Compose version is out, we're ready to push a new release: #1: Merge snapshot into main \u00b6 First we merge the snapshot branch into main : git checkout snapshot && git pull git checkout main && git pull # Create branch for PR git checkout -b main_snapshot_merge # Merge in the snapshot branch git merge snapshot #2: Update dependencies \u00b6 Edit dependencies.kt : Update the Libs.AndroidX.Compose.snapshot property to be an empty string ( val snapshot = \"\" ) Update the Libs.AndroidX.Compose.version property to the new Compose version ( 1.0.0-alpha03 for example). Make sure the project builds and test pass: ./gradlew check Commit the changes. #3: Bump the version number \u00b6 Edit gradle.properties : Update the VERSION_NAME property and remove the -SNAPSHOT suffix. Commit the changes, using the commit message containing the new version name. #4: Push to GitHub \u00b6 Push the branch to GitHub and create a PR against the main branch, and send for review. Once approved and merged, it will be automatically deployed to Maven Central. #5: Create release \u00b6 Once the above PR has been approved and merged, we need to create the GitHub release: Open up the Releases page. At the top you should see a 'Draft' release, auto populated with any PRs since the last release. Click 'Edit'. Make sure that the version number matches what we released (the tool guesses but is not always correct). Double check everything, then press 'Publish release'. At this point the release is published. This will trigger the docs action to run, which will auto-deploy a new version of the website . #6: Prepare the next development version \u00b6 The current release is now finished, but we need to update the version for the next development version: Edit gradle.properties : Update the VERSION_NAME property, by increasing the version number, and adding the -SNAPSHOT suffix. Example: released version: 0.3.0 . Update to 0.3.1-SNAPSHOT git commit and push to main . Finally, merge all of these changes back to snapshot : git checkout snapshot && git pull git merge main git push","title":"Update guide"},{"location":"updating/#updating-releasing-accompanist","text":"This doc is mostly for maintainers.","title":"Updating &amp; releasing Accompanist"},{"location":"updating/#new-features-bugfixes","text":"All new features should be uploaded as PRs against the main branch. Once merged into main , they should be merged into the snapshot branch: git checkout main && git pull git checkout snapshot && git pull # Create branch for PR git checkout -b snapshot_main_merge # Merge in the main branch git merge main # Push to GitHub","title":"New features &amp; bugfixes"},{"location":"updating/#jetpack-compose-snapshots","text":"We publish snapshot versions of Accompanist, which depend on a SNAPSHOT versions of Jetpack Compose. These are built from the snapshot branch.","title":"Jetpack Compose Snapshots"},{"location":"updating/#updating-to-a-newer-compose-snapshot","text":"As mentioned above, updating to a new Compose snapshot is done by submitting a new PR against the snapshot branch: git checkout snapshot && git pull # Create branch for PR git checkout -b update_snapshot Now edit the project to depend on the new Compose SNAPSHOT version: Edit dependencies.kt : Update the Libs.AndroidX.Compose.snapshot property to be the snapshot number Ensure that the Libs.AndroidX.Compose.version property is correct Make sure the project builds and test pass: ./gradlew check Now git commit the changes and push to GitHub. Finally create a PR (with the base branch as snapshot ) and send for review.","title":"Updating to a newer Compose snapshot"},{"location":"updating/#releasing","text":"Once the next Jetpack Compose version is out, we're ready to push a new release:","title":"Releasing"},{"location":"updating/#1-merge-snapshot-into-main","text":"First we merge the snapshot branch into main : git checkout snapshot && git pull git checkout main && git pull # Create branch for PR git checkout -b main_snapshot_merge # Merge in the snapshot branch git merge snapshot","title":"#1: Merge snapshot into main"},{"location":"updating/#2-update-dependencies","text":"Edit dependencies.kt : Update the Libs.AndroidX.Compose.snapshot property to be an empty string ( val snapshot = \"\" ) Update the Libs.AndroidX.Compose.version property to the new Compose version ( 1.0.0-alpha03 for example). Make sure the project builds and test pass: ./gradlew check Commit the changes.","title":"#2: Update dependencies"},{"location":"updating/#3-bump-the-version-number","text":"Edit gradle.properties : Update the VERSION_NAME property and remove the -SNAPSHOT suffix. Commit the changes, using the commit message containing the new version name.","title":"#3: Bump the version number"},{"location":"updating/#4-push-to-github","text":"Push the branch to GitHub and create a PR against the main branch, and send for review. Once approved and merged, it will be automatically deployed to Maven Central.","title":"#4: Push to GitHub"},{"location":"updating/#5-create-release","text":"Once the above PR has been approved and merged, we need to create the GitHub release: Open up the Releases page. At the top you should see a 'Draft' release, auto populated with any PRs since the last release. Click 'Edit'. Make sure that the version number matches what we released (the tool guesses but is not always correct). Double check everything, then press 'Publish release'. At this point the release is published. This will trigger the docs action to run, which will auto-deploy a new version of the website .","title":"#5: Create release"},{"location":"updating/#6-prepare-the-next-development-version","text":"The current release is now finished, but we need to update the version for the next development version: Edit gradle.properties : Update the VERSION_NAME property, by increasing the version number, and adding the -SNAPSHOT suffix. Example: released version: 0.3.0 . Update to 0.3.1-SNAPSHOT git commit and push to main . Finally, merge all of these changes back to snapshot : git checkout snapshot && git pull git merge main git push","title":"#6: Prepare the next development version"},{"location":"using-snapshot-version/","text":"Using a Snapshot Version of the Library \u00b6 If you would like to depend on the cutting edge version of the Accompanist library, you can use the snapshot versions that are published to Sonatype OSSRH 's snapshot repository. These are updated on every commit to main . To do so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXX-SNAPSHOT' } You might see a number of different versioned snapshots. If we use an example: 0.3.0-SNAPSHOT is a build from the main branch, and depends on the latest tagged Jetpack Compose release (i.e. alpha03 ). 0.3.0.compose-6574163-SNAPSHOT is a build from the snapshot branch. This depends on the SNAPSHOT build of Jetpack Compose from build 6574163 . You should only use these if you are using Jetpack Compose snapshot versions (see below). Using Jetpack Compose Snapshots \u00b6 If you're using SNAPSHOT versions of the androidx.compose libraries, you might run into issues with the current stable Accompanist release forcing an older version of those libraries. We publish snapshot versions of Accompanist which depend on recent Jetpack Compose SNAPSHOT repositories. To find a recent build, look through the snapshot repository for any versions in the scheme x.x.x.compose-YYYY-SNAPSHOT (for example: 0.3.0.compose-6574163-SNAPSHOT ). The YYYY in the scheme is the snapshot build being used from AndroidX (from the example: build 6574163 ). You can then use it like so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXXX.compose-YYYYY-SNAPSHOT' } These builds are updated regularly, but there's no guarantee that we will create one for a given snapshot number. Note: you might also see versions in the scheme x.x.x.ui-YYYY-SNAPSHOT . These are the same, just using an older suffix.","title":"Snapshots"},{"location":"using-snapshot-version/#using-a-snapshot-version-of-the-library","text":"If you would like to depend on the cutting edge version of the Accompanist library, you can use the snapshot versions that are published to Sonatype OSSRH 's snapshot repository. These are updated on every commit to main . To do so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXX-SNAPSHOT' } You might see a number of different versioned snapshots. If we use an example: 0.3.0-SNAPSHOT is a build from the main branch, and depends on the latest tagged Jetpack Compose release (i.e. alpha03 ). 0.3.0.compose-6574163-SNAPSHOT is a build from the snapshot branch. This depends on the SNAPSHOT build of Jetpack Compose from build 6574163 . You should only use these if you are using Jetpack Compose snapshot versions (see below).","title":"Using a Snapshot Version of the Library"},{"location":"using-snapshot-version/#using-jetpack-compose-snapshots","text":"If you're using SNAPSHOT versions of the androidx.compose libraries, you might run into issues with the current stable Accompanist release forcing an older version of those libraries. We publish snapshot versions of Accompanist which depend on recent Jetpack Compose SNAPSHOT repositories. To find a recent build, look through the snapshot repository for any versions in the scheme x.x.x.compose-YYYY-SNAPSHOT (for example: 0.3.0.compose-6574163-SNAPSHOT ). The YYYY in the scheme is the snapshot build being used from AndroidX (from the example: build 6574163 ). You can then use it like so: repositories { // ... maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } } dependencies { // Check the latest SNAPSHOT version from the link above classpath 'dev.chrisbanes.accompanist:accompanist-coil:XXXX.compose-YYYYY-SNAPSHOT' } These builds are updated regularly, but there's no guarantee that we will create one for a given snapshot number. Note: you might also see versions in the scheme x.x.x.ui-YYYY-SNAPSHOT . These are the same, just using an older suffix.","title":"Using Jetpack Compose Snapshots"},{"location":"api/coil/","text":"// coil coil \u00b6 Packages \u00b6 Name Summary dev.chrisbanes.accompanist.coil","title":"Coil"},{"location":"api/coil/#coil","text":"","title":"coil"},{"location":"api/coil/#packages","text":"Name Summary dev.chrisbanes.accompanist.coil","title":"Packages"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/","text":"// coil / dev.chrisbanes.accompanist.coil Package dev.chrisbanes.accompanist.coil \u00b6 Types \u00b6 Name Summary CoilImageConstants Content object CoilImageConstants ErrorResult Content typealias ErrorResult = ImageLoadState.Error RequestResult Content typealias RequestResult = ImageLoadState SuccessResult Content typealias SuccessResult = ImageLoadState.Success Functions \u00b6 Name Summary CoilImage Creates a composable that will attempt to load the given request using Coil, and provides complete content of how the current state is displayed:CoilImage( request = ImageRequest.Builder(context).data(...).build(), ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Coil, and provides complete content of how the current state is displayed:CoilImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Content @Composable() fun CoilImage (data: Any , modifier: Modifier, requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given request using Coil, and then display the result in an Image.This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. CoilImage( request = ImageRequest.Builder(context).data(...).build(), fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?) Creates a composable that will attempt to load the given data using Coil, and then display the result in an Image.This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. CoilImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Content @Composable() fun CoilImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?) CoilImageWithCrossfade Content @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~request~~~~:~~ ImageRequest~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ (ImageLoadState, IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ (ImageLoadState) -> Unit ~~,~~ ~~error~~~~:~~ (ImageLoadState.Error) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~ @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~data~~~~:~~ Any ~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ (ImageLoadState, IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ (ImageLoadState) -> Unit ~~,~~ ~~error~~~~:~~ (ImageLoadState.Error) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~ Properties \u00b6 Name Summary AmbientImageLoader Ambient containing the preferred ImageLoader to use in CoilImage .val AmbientImageLoader : ProvidableAmbient","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/#package-devchrisbanesaccompanistcoil","text":"","title":"Package dev.chrisbanes.accompanist.coil"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/#types","text":"Name Summary CoilImageConstants Content object CoilImageConstants ErrorResult Content typealias ErrorResult = ImageLoadState.Error RequestResult Content typealias RequestResult = ImageLoadState SuccessResult Content typealias SuccessResult = ImageLoadState.Success","title":"Types"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/#functions","text":"Name Summary CoilImage Creates a composable that will attempt to load the given request using Coil, and provides complete content of how the current state is displayed:CoilImage( request = ImageRequest.Builder(context).data(...).build(), ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Coil, and provides complete content of how the current state is displayed:CoilImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Content @Composable() fun CoilImage (data: Any , modifier: Modifier, requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given request using Coil, and then display the result in an Image.This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. CoilImage( request = ImageRequest.Builder(context).data(...).build(), fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?) Creates a composable that will attempt to load the given data using Coil, and then display the result in an Image.This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. CoilImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Content @Composable() fun CoilImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?) CoilImageWithCrossfade Content @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~request~~~~:~~ ImageRequest~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ (ImageLoadState, IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ (ImageLoadState) -> Unit ~~,~~ ~~error~~~~:~~ (ImageLoadState.Error) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~ @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~data~~~~:~~ Any ~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ (ImageLoadState, IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ (ImageLoadState) -> Unit ~~,~~ ~~error~~~~:~~ (ImageLoadState.Error) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~","title":"Functions"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/#properties","text":"Name Summary AmbientImageLoader Ambient containing the preferred ImageLoader to use in CoilImage .val AmbientImageLoader : ProvidableAmbient","title":"Properties"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-with-crossfade/","text":"// coil / dev.chrisbanes.accompanist.coil / CoilImageWithCrossfade CoilImageWithCrossfade \u00b6 Content @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~data~~~~:~~ Any ~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ (ImageLoadState, IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ (ImageLoadState) -> Unit ~~,~~ ~~error~~~~:~~ (ImageLoadState.Error) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~ @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~request~~~~:~~ ImageRequest~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ (ImageLoadState, IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ (ImageLoadState) -> Unit ~~,~~ ~~error~~~~:~~ (ImageLoadState.Error) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~","title":" coil image with crossfade"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-with-crossfade/#coilimagewithcrossfade","text":"Content @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~data~~~~:~~ Any ~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ (ImageLoadState, IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ (ImageLoadState) -> Unit ~~,~~ ~~error~~~~:~~ (ImageLoadState.Error) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~ @Composable() ~~fun~~ ~~CoilImageWithCrossfade~~ ~~(~~~~request~~~~:~~ ImageRequest~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ Int ~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ (ImageLoadState, IntSize) -> Boolean ~~,~~ ~~onRequestCompleted~~~~:~~ (ImageLoadState) -> Unit ~~,~~ ~~error~~~~:~~ (ImageLoadState.Error) -> Unit ?~~,~~ ~~loading~~~~:~~ () -> Unit ?~~)~~","title":"CoilImageWithCrossfade"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/","text":"// coil / dev.chrisbanes.accompanist.coil / CoilImage CoilImage \u00b6 Creates a composable that will attempt to load the given data using Coil, and provides complete content of how the current state is displayed: CoilImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Parameters \u00b6 Name Summary content Content to be displayed for the given state. data The data to load. See ImageRequest.Builder.data for the types allowed. imageLoader The ImageLoader to use when requesting the image. Defaults to CoilImageConstants.defaultImageLoader . modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. requestBuilder Optional builder for the ImageRequest. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (data: Any , modifier: Modifier, requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given request using Coil, and provides complete content of how the current state is displayed: CoilImage( request = ImageRequest.Builder(context).data(...).build(), ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Parameters \u00b6 Name Summary content Content to be displayed for the given state. imageLoader The ImageLoader to use when requesting the image. Defaults to CoilImageConstants.defaultImageLoader . modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. request The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. requestBuilder Optional builder for the ImageRequest. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Coil, and then display the result in an Image. This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. CoilImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Parameters \u00b6 Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. data The data to load. See ImageRequest.Builder.data for the types allowed. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. imageLoader The ImageLoader to use when requesting the image. Defaults to CoilImageConstants.defaultImageLoader . loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. requestBuilder Optional builder for the ImageRequest. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?) Creates a composable that will attempt to load the given request using Coil, and then display the result in an Image. This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. CoilImage( request = ImageRequest.Builder(context).data(...).build(), fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Parameters \u00b6 Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. imageLoader The ImageLoader to use when requesting the image. Defaults to CoilImageConstants.defaultImageLoader . loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. request The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. requestBuilder Optional builder for the ImageRequest. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?)","title":" coil image"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#coilimage","text":"Creates a composable that will attempt to load the given data using Coil, and provides complete content of how the current state is displayed: CoilImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } }","title":"CoilImage"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#parameters","text":"Name Summary content Content to be displayed for the given state. data The data to load. See ImageRequest.Builder.data for the types allowed. imageLoader The ImageLoader to use when requesting the image. Defaults to CoilImageConstants.defaultImageLoader . modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. requestBuilder Optional builder for the ImageRequest. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (data: Any , modifier: Modifier, requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given request using Coil, and provides complete content of how the current state is displayed: CoilImage( request = ImageRequest.Builder(context).data(...).build(), ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } }","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#parameters_1","text":"Name Summary content Content to be displayed for the given state. imageLoader The ImageLoader to use when requesting the image. Defaults to CoilImageConstants.defaultImageLoader . modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. request The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. requestBuilder Optional builder for the ImageRequest. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Coil, and then display the result in an Image. This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. CoilImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } )","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#parameters_2","text":"Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. data The data to load. See ImageRequest.Builder.data for the types allowed. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. imageLoader The ImageLoader to use when requesting the image. Defaults to CoilImageConstants.defaultImageLoader . loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. requestBuilder Optional builder for the ImageRequest. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?) Creates a composable that will attempt to load the given request using Coil, and then display the result in an Image. This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. CoilImage( request = ImageRequest.Builder(context).data(...).build(), fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } )","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image/#parameters_3","text":"Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. imageLoader The ImageLoader to use when requesting the image. Defaults to CoilImageConstants.defaultImageLoader . loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. request The request to execute. If the request does not have a ImageRequest.sizeResolver set, one will be set on the request using the layout constraints. requestBuilder Optional builder for the ImageRequest. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun CoilImage (request: ImageRequest, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?)","title":"Parameters"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-constants/","text":"// coil / dev.chrisbanes.accompanist.coil / CoilImageConstants CoilImageConstants \u00b6 object CoilImageConstants Functions \u00b6 Name Summary defaultImageLoader Returns the default ImageLoader value for the imageLoader parameter in CoilImage . Content @Composable() fun defaultImageLoader (): ImageLoader equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Index"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-constants/#coilimageconstants","text":"object CoilImageConstants","title":"CoilImageConstants"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-constants/#functions","text":"Name Summary defaultImageLoader Returns the default ImageLoader value for the imageLoader parameter in CoilImage . Content @Composable() fun defaultImageLoader (): ImageLoader equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-constants/default-image-loader/","text":"// coil / dev.chrisbanes.accompanist.coil / CoilImageConstants / defaultImageLoader defaultImageLoader \u00b6 Returns the default ImageLoader value for the imageLoader parameter in CoilImage . Content @Composable() fun defaultImageLoader (): ImageLoader","title":"Default image loader"},{"location":"api/coil/dev.chrisbanes.accompanist.coil/-coil-image-constants/default-image-loader/#defaultimageloader","text":"Returns the default ImageLoader value for the imageLoader parameter in CoilImage . Content @Composable() fun defaultImageLoader (): ImageLoader","title":"defaultImageLoader"},{"location":"api/glide/","text":"// glide glide \u00b6 Packages \u00b6 Name Summary dev.chrisbanes.accompanist.glide","title":"Glide"},{"location":"api/glide/#glide","text":"","title":"glide"},{"location":"api/glide/#packages","text":"Name Summary dev.chrisbanes.accompanist.glide","title":"Packages"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/","text":"// glide / dev.chrisbanes.accompanist.glide Package dev.chrisbanes.accompanist.glide \u00b6 Types \u00b6 Name Summary GlideImageConstants Content object GlideImageConstants Functions \u00b6 Name Summary GlideImage Creates a composable that will attempt to load the given data using Glide, and provides complete content of how the current state is displayed:GlideImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Content @Composable() fun GlideImage (data: Any , modifier: Modifier, requestBuilder: RequestBuilder< Drawable >.(IntSize) -> RequestBuilder< Drawable >?, requestManager: RequestManager, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Glide, and then display the result in an Image.This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. GlideImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Content @Composable() fun GlideImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: RequestBuilder< Drawable >.(IntSize) -> RequestBuilder< Drawable >?, requestManager: RequestManager, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?) Properties \u00b6 Name Summary AmbientRequestManager Ambient containing the preferred RequestManager to use in GlideImage .val AmbientRequestManager : ProvidableAmbient","title":"Index"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/#package-devchrisbanesaccompanistglide","text":"","title":"Package dev.chrisbanes.accompanist.glide"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/#types","text":"Name Summary GlideImageConstants Content object GlideImageConstants","title":"Types"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/#functions","text":"Name Summary GlideImage Creates a composable that will attempt to load the given data using Glide, and provides complete content of how the current state is displayed:GlideImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Content @Composable() fun GlideImage (data: Any , modifier: Modifier, requestBuilder: RequestBuilder< Drawable >.(IntSize) -> RequestBuilder< Drawable >?, requestManager: RequestManager, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Glide, and then display the result in an Image.This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. GlideImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Content @Composable() fun GlideImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: RequestBuilder< Drawable >.(IntSize) -> RequestBuilder< Drawable >?, requestManager: RequestManager, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?)","title":"Functions"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/#properties","text":"Name Summary AmbientRequestManager Ambient containing the preferred RequestManager to use in GlideImage .val AmbientRequestManager : ProvidableAmbient","title":"Properties"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/-glide-image/","text":"// glide / dev.chrisbanes.accompanist.glide / GlideImage GlideImage \u00b6 Creates a composable that will attempt to load the given data using Glide, and provides complete content of how the current state is displayed: GlideImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Parameters \u00b6 Name Summary content Content to be displayed for the given state. data The data to load. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. requestBuilder Optional builder for the RequestBuilder. requestManager The RequestManager to use when requesting the image. Defaults to the current value of AmbientRequestManager . shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun GlideImage (data: Any , modifier: Modifier, requestBuilder: RequestBuilder< Drawable >.(IntSize) -> RequestBuilder< Drawable >?, requestManager: RequestManager, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Glide, and then display the result in an Image. This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. GlideImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Parameters \u00b6 Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. data The data to load. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. requestBuilder Optional builder for the RequestBuilder. requestManager The RequestManager to use when requesting the image. Defaults to the current value of AmbientRequestManager . shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun GlideImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: RequestBuilder< Drawable >.(IntSize) -> RequestBuilder< Drawable >?, requestManager: RequestManager, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?)","title":" glide image"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/-glide-image/#glideimage","text":"Creates a composable that will attempt to load the given data using Glide, and provides complete content of how the current state is displayed: GlideImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } }","title":"GlideImage"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/-glide-image/#parameters","text":"Name Summary content Content to be displayed for the given state. data The data to load. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. requestBuilder Optional builder for the RequestBuilder. requestManager The RequestManager to use when requesting the image. Defaults to the current value of AmbientRequestManager . shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun GlideImage (data: Any , modifier: Modifier, requestBuilder: RequestBuilder< Drawable >.(IntSize) -> RequestBuilder< Drawable >?, requestManager: RequestManager, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Glide, and then display the result in an Image. This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. GlideImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } )","title":"Parameters"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/-glide-image/#parameters_1","text":"Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. data The data to load. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. requestBuilder Optional builder for the RequestBuilder. requestManager The RequestManager to use when requesting the image. Defaults to the current value of AmbientRequestManager . shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun GlideImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , requestBuilder: RequestBuilder< Drawable >.(IntSize) -> RequestBuilder< Drawable >?, requestManager: RequestManager, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?)","title":"Parameters"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/-glide-image-constants/","text":"// glide / dev.chrisbanes.accompanist.glide / GlideImageConstants GlideImageConstants \u00b6 object GlideImageConstants Functions \u00b6 Name Summary defaultRequestManager Returns the default RequestManager value for the requestManager parameter in GlideImage . Content @Composable() fun defaultRequestManager (): RequestManager equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Index"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/-glide-image-constants/#glideimageconstants","text":"object GlideImageConstants","title":"GlideImageConstants"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/-glide-image-constants/#functions","text":"Name Summary defaultRequestManager Returns the default RequestManager value for the requestManager parameter in GlideImage . Content @Composable() fun defaultRequestManager (): RequestManager equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/-glide-image-constants/default-request-manager/","text":"// glide / dev.chrisbanes.accompanist.glide / GlideImageConstants / defaultRequestManager defaultRequestManager \u00b6 Returns the default RequestManager value for the requestManager parameter in GlideImage . Content @Composable() fun defaultRequestManager (): RequestManager","title":"Default request manager"},{"location":"api/glide/dev.chrisbanes.accompanist.glide/-glide-image-constants/default-request-manager/#defaultrequestmanager","text":"Returns the default RequestManager value for the requestManager parameter in GlideImage . Content @Composable() fun defaultRequestManager (): RequestManager","title":"defaultRequestManager"},{"location":"api/imageloading-core/","text":"// imageloading-core imageloading-core \u00b6 Packages \u00b6 Name Summary dev.chrisbanes.accompanist.imageloading","title":"Image Loading Core"},{"location":"api/imageloading-core/#imageloading-core","text":"","title":"imageloading-core"},{"location":"api/imageloading-core/#packages","text":"Name Summary dev.chrisbanes.accompanist.imageloading","title":"Packages"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading Package dev.chrisbanes.accompanist.imageloading \u00b6 Types \u00b6 Name Summary AndroidDrawablePainter A Painter which draws an Android Drawable . Supports Animatable drawables.Taken from https://goo.gle/compose-drawable-painter Content class AndroidDrawablePainter ( drawable : Drawable ) : Painter DataSource Content enum DataSource : Enum < DataSource > ImageLoadingColorMatrix An extension to ColorMatrix which implements the Material Design image loading pattern. Content class ImageLoadingColorMatrix ( saturation : Float , alpha : Float , brightness : Float ) : ColorMatrix ImageLoadState Represents the state of a ImageLoad Content sealed class ImageLoadState Functions \u00b6 Name Summary ImageLoad A generic image loading composable, which provides hooks for image loading libraries to use. Apps shouldn't generally use this function, instead preferring one of the extension libraries which build upon this, such as the Coil library.The executeRequest parameters allows providing of a lambda to execute the 'image load'. The R type and request parameter should be whatever primitive the library uses to model a request. The TR type would normally be the same as R , but allows transforming of the request for execution (say to wrap with extra information). Content @Composable() fun < R : Any , TR : Any > ImageLoad (request: R , executeRequest: SuspendFunction1 < TR , ImageLoadState >, modifier: Modifier, requestKey: Any , transformRequestForSize: ( R , IntSize) -> TR ?, shouldRefetchOnSizeChange: ( ImageLoadState , IntSize) -> Boolean , onRequestCompleted: ( ImageLoadState ) -> Unit , content: ( ImageLoadState ) -> Unit ) MaterialLoadingImage A wrapper around Image which implements the Material Image Loading pattern. Content @Composable() fun MaterialLoadingImage (asset: ImageAsset, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) @Composable() fun MaterialLoadingImage (painter: Painter, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) @Composable() fun MaterialLoadingImage (result: ImageLoadState.Success , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, skipFadeWhenLoadedFromMemory: Boolean , fadeInEnabled: Boolean , fadeInDurationMs: Int ) toPainter Allows wrapping of a Drawable into a Painter, attempting to un-wrap the drawable contents and use Compose primitives where possible. Content fun Drawable . toPainter (): Painter Properties \u00b6 Name Summary DefaultRefetchOnSizeChangeLambda Default lamdba for use in the shouldRefetchOnSizeChange parameter.val DefaultRefetchOnSizeChangeLambda : ( ImageLoadState , IntSize) -> Boolean EmptyRequestCompleteLambda Empty lamdba for use in the onRequestCompleted parameter.val EmptyRequestCompleteLambda : ( ImageLoadState ) -> Unit","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/#package-devchrisbanesaccompanistimageloading","text":"","title":"Package dev.chrisbanes.accompanist.imageloading"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/#types","text":"Name Summary AndroidDrawablePainter A Painter which draws an Android Drawable . Supports Animatable drawables.Taken from https://goo.gle/compose-drawable-painter Content class AndroidDrawablePainter ( drawable : Drawable ) : Painter DataSource Content enum DataSource : Enum < DataSource > ImageLoadingColorMatrix An extension to ColorMatrix which implements the Material Design image loading pattern. Content class ImageLoadingColorMatrix ( saturation : Float , alpha : Float , brightness : Float ) : ColorMatrix ImageLoadState Represents the state of a ImageLoad Content sealed class ImageLoadState","title":"Types"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/#functions","text":"Name Summary ImageLoad A generic image loading composable, which provides hooks for image loading libraries to use. Apps shouldn't generally use this function, instead preferring one of the extension libraries which build upon this, such as the Coil library.The executeRequest parameters allows providing of a lambda to execute the 'image load'. The R type and request parameter should be whatever primitive the library uses to model a request. The TR type would normally be the same as R , but allows transforming of the request for execution (say to wrap with extra information). Content @Composable() fun < R : Any , TR : Any > ImageLoad (request: R , executeRequest: SuspendFunction1 < TR , ImageLoadState >, modifier: Modifier, requestKey: Any , transformRequestForSize: ( R , IntSize) -> TR ?, shouldRefetchOnSizeChange: ( ImageLoadState , IntSize) -> Boolean , onRequestCompleted: ( ImageLoadState ) -> Unit , content: ( ImageLoadState ) -> Unit ) MaterialLoadingImage A wrapper around Image which implements the Material Image Loading pattern. Content @Composable() fun MaterialLoadingImage (asset: ImageAsset, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) @Composable() fun MaterialLoadingImage (painter: Painter, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) @Composable() fun MaterialLoadingImage (result: ImageLoadState.Success , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, skipFadeWhenLoadedFromMemory: Boolean , fadeInEnabled: Boolean , fadeInDurationMs: Int ) toPainter Allows wrapping of a Drawable into a Painter, attempting to un-wrap the drawable contents and use Compose primitives where possible. Content fun Drawable . toPainter (): Painter","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/#properties","text":"Name Summary DefaultRefetchOnSizeChangeLambda Default lamdba for use in the shouldRefetchOnSizeChange parameter.val DefaultRefetchOnSizeChangeLambda : ( ImageLoadState , IntSize) -> Boolean EmptyRequestCompleteLambda Empty lamdba for use in the onRequestCompleted parameter.val EmptyRequestCompleteLambda : ( ImageLoadState ) -> Unit","title":"Properties"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoad ImageLoad \u00b6 A generic image loading composable, which provides hooks for image loading libraries to use. Apps shouldn't generally use this function, instead preferring one of the extension libraries which build upon this, such as the Coil library. The executeRequest parameters allows providing of a lambda to execute the 'image load'. The R type and request parameter should be whatever primitive the library uses to model a request. The TR type would normally be the same as R , but allows transforming of the request for execution (say to wrap with extra information). Parameters \u00b6 Name Summary content Content to be displayed for the given state. executeRequest Suspending lambda to execute an image loading request. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. request The request to execute. requestKey The object to key this request on. If the request type supports equality then the default value will work. Otherwise pass in the data value. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. transformRequestForSize Optionally transform request for the given IntSize. Content @Composable() fun < R : Any , TR : Any > ImageLoad (request: R , executeRequest: SuspendFunction1 < TR , ImageLoadState >, modifier: Modifier, requestKey: Any , transformRequestForSize: ( R , IntSize) -> TR ?, shouldRefetchOnSizeChange: ( ImageLoadState , IntSize) -> Boolean , onRequestCompleted: ( ImageLoadState ) -> Unit , content: ( ImageLoadState ) -> Unit )","title":" image load"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load/#imageload","text":"A generic image loading composable, which provides hooks for image loading libraries to use. Apps shouldn't generally use this function, instead preferring one of the extension libraries which build upon this, such as the Coil library. The executeRequest parameters allows providing of a lambda to execute the 'image load'. The R type and request parameter should be whatever primitive the library uses to model a request. The TR type would normally be the same as R , but allows transforming of the request for execution (say to wrap with extra information).","title":"ImageLoad"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load/#parameters","text":"Name Summary content Content to be displayed for the given state. executeRequest Suspending lambda to execute an image loading request. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. request The request to execute. requestKey The object to key this request on. If the request type supports equality then the default value will work. Otherwise pass in the data value. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. transformRequestForSize Optionally transform request for the given IntSize. Content @Composable() fun < R : Any , TR : Any > ImageLoad (request: R , executeRequest: SuspendFunction1 < TR , ImageLoadState >, modifier: Modifier, requestKey: Any , transformRequestForSize: ( R , IntSize) -> TR ?, shouldRefetchOnSizeChange: ( ImageLoadState , IntSize) -> Boolean , onRequestCompleted: ( ImageLoadState ) -> Unit , content: ( ImageLoadState ) -> Unit )","title":"Parameters"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-material-loading-image/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / MaterialLoadingImage MaterialLoadingImage \u00b6 A wrapper around Image which implements the Material Image Loading pattern. Parameters \u00b6 Name Summary alignment Optional alignment parameter used to place the ImageAsset in the given bounds defined by the width and height. asset The ImageAsset to draw. clock The AnimationClockObservable to use for running animations. colorFilter Optional ColorFilter to apply for the ImageAsset when it is rendered onscreen contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the ImageAsset. fadeInDurationMs The duration of the fade-in animation in milliseconds. fadeInEnabled Whether the fade-in animation should be used or not. modifier Modifier used to adjust the layout algorithm or draw decoration content (ex. background) Content @Composable() fun MaterialLoadingImage (asset: ImageAsset, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) A wrapper around Image which implements the Material Image Loading pattern. Parameters \u00b6 Name Summary alignment Optional alignment parameter used to place the painter in the given bounds defined by the width and height. clock The AnimationClockObservable to use for running animations. colorFilter Optional ColorFilter to apply for the ImageAsset when it is rendered onscreen contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the ImageAsset. fadeInDurationMs The duration of the fade-in animation in milliseconds. fadeInEnabled Whether the fade-in animation should be used or not. modifier Modifier used to adjust the layout algorithm or draw decoration content (ex. background) painter The Painter to draw. Content @Composable() fun MaterialLoadingImage (painter: Painter, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) A wrapper around Image which implements the Material Image Loading pattern. Parameters \u00b6 Name Summary alignment Optional alignment parameter used to place the ImageAsset in the given bounds defined by the width and height. clock The AnimationClockObservable to use for running animations. colorFilter Optional ColorFilter to apply for the ImageAsset when it is rendered onscreen contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the ImageAsset. fadeInDurationMs The duration of the fade-in animation in milliseconds. fadeInEnabled Whether the fade-in animation should be used or not. modifier Modifier used to adjust the layout algorithm or draw decoration content (ex. background) result A ImageLoadState.Success instance. skipFadeWhenLoadedFromMemory Whether the fade animation should be skipped when the result has been loaded from memory. Content @Composable() fun MaterialLoadingImage (result: ImageLoadState.Success , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, skipFadeWhenLoadedFromMemory: Boolean , fadeInEnabled: Boolean , fadeInDurationMs: Int )","title":" material loading image"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-material-loading-image/#materialloadingimage","text":"A wrapper around Image which implements the Material Image Loading pattern.","title":"MaterialLoadingImage"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-material-loading-image/#parameters","text":"Name Summary alignment Optional alignment parameter used to place the ImageAsset in the given bounds defined by the width and height. asset The ImageAsset to draw. clock The AnimationClockObservable to use for running animations. colorFilter Optional ColorFilter to apply for the ImageAsset when it is rendered onscreen contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the ImageAsset. fadeInDurationMs The duration of the fade-in animation in milliseconds. fadeInEnabled Whether the fade-in animation should be used or not. modifier Modifier used to adjust the layout algorithm or draw decoration content (ex. background) Content @Composable() fun MaterialLoadingImage (asset: ImageAsset, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) A wrapper around Image which implements the Material Image Loading pattern.","title":"Parameters"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-material-loading-image/#parameters_1","text":"Name Summary alignment Optional alignment parameter used to place the painter in the given bounds defined by the width and height. clock The AnimationClockObservable to use for running animations. colorFilter Optional ColorFilter to apply for the ImageAsset when it is rendered onscreen contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the ImageAsset. fadeInDurationMs The duration of the fade-in animation in milliseconds. fadeInEnabled Whether the fade-in animation should be used or not. modifier Modifier used to adjust the layout algorithm or draw decoration content (ex. background) painter The Painter to draw. Content @Composable() fun MaterialLoadingImage (painter: Painter, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, fadeInEnabled: Boolean , fadeInDurationMs: Int ) A wrapper around Image which implements the Material Image Loading pattern.","title":"Parameters"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-material-loading-image/#parameters_2","text":"Name Summary alignment Optional alignment parameter used to place the ImageAsset in the given bounds defined by the width and height. clock The AnimationClockObservable to use for running animations. colorFilter Optional ColorFilter to apply for the ImageAsset when it is rendered onscreen contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the ImageAsset. fadeInDurationMs The duration of the fade-in animation in milliseconds. fadeInEnabled Whether the fade-in animation should be used or not. modifier Modifier used to adjust the layout algorithm or draw decoration content (ex. background) result A ImageLoadState.Success instance. skipFadeWhenLoadedFromMemory Whether the fade animation should be skipped when the result has been loaded from memory. Content @Composable() fun MaterialLoadingImage (result: ImageLoadState.Success , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, clock: AnimationClockObservable, skipFadeWhenLoadedFromMemory: Boolean , fadeInEnabled: Boolean , fadeInDurationMs: Int )","title":"Parameters"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/to-painter/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / toPainter toPainter \u00b6 Allows wrapping of a Drawable into a Painter, attempting to un-wrap the drawable contents and use Compose primitives where possible. Content fun Drawable . toPainter (): Painter","title":"To painter"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/to-painter/#topainter","text":"Allows wrapping of a Drawable into a Painter, attempting to un-wrap the drawable contents and use Compose primitives where possible. Content fun Drawable . toPainter (): Painter","title":"toPainter"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-android-drawable-painter/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / AndroidDrawablePainter AndroidDrawablePainter \u00b6 A Painter which draws an Android Drawable . Supports Animatable drawables. Taken from https://goo.gle/compose-drawable-painter class AndroidDrawablePainter ( drawable : Drawable ) : Painter Constructors \u00b6 Name Summary AndroidDrawablePainter fun AndroidDrawablePainter (drawable: Drawable ) Functions \u00b6 Name Summary configureAlpha Content override fun configureAlpha (alpha: Float ) configureColorFilter Content override fun configureColorFilter (colorFilter: ColorFilter?) configureLayoutDirection Content override fun configureLayoutDirection (rtl: LayoutDirection) draw Content override fun DrawScope. draw (size: Size, alpha: Float , colorFilter: ColorFilter?) equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int obtainPaint Content override fun obtainPaint (): Paint toString Content open override fun toString (): String Properties \u00b6 Name Summary alpha override var alpha : Float colorFilter override var colorFilter : ColorFilter? drawLambda override val drawLambda : DrawScope.() -> Unit intrinsicSize open override val intrinsicSize : Size layerPaint override var layerPaint : Paint? layoutDirection override var layoutDirection : LayoutDirection useLayer override var useLayer : Boolean","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-android-drawable-painter/#androiddrawablepainter","text":"A Painter which draws an Android Drawable . Supports Animatable drawables. Taken from https://goo.gle/compose-drawable-painter class AndroidDrawablePainter ( drawable : Drawable ) : Painter","title":"AndroidDrawablePainter"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-android-drawable-painter/#constructors","text":"Name Summary AndroidDrawablePainter fun AndroidDrawablePainter (drawable: Drawable )","title":"Constructors"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-android-drawable-painter/#functions","text":"Name Summary configureAlpha Content override fun configureAlpha (alpha: Float ) configureColorFilter Content override fun configureColorFilter (colorFilter: ColorFilter?) configureLayoutDirection Content override fun configureLayoutDirection (rtl: LayoutDirection) draw Content override fun DrawScope. draw (size: Size, alpha: Float , colorFilter: ColorFilter?) equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int obtainPaint Content override fun obtainPaint (): Paint toString Content open override fun toString (): String","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-android-drawable-painter/#properties","text":"Name Summary alpha override var alpha : Float colorFilter override var colorFilter : ColorFilter? drawLambda override val drawLambda : DrawScope.() -> Unit intrinsicSize open override val intrinsicSize : Size layerPaint override var layerPaint : Paint? layoutDirection override var layoutDirection : LayoutDirection useLayer override var useLayer : Boolean","title":"Properties"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-android-drawable-painter/-android-drawable-painter/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / AndroidDrawablePainter / AndroidDrawablePainter AndroidDrawablePainter \u00b6 Content fun AndroidDrawablePainter (drawable: Drawable )","title":" android drawable painter"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-android-drawable-painter/-android-drawable-painter/#androiddrawablepainter","text":"Content fun AndroidDrawablePainter (drawable: Drawable )","title":"AndroidDrawablePainter"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / DataSource DataSource \u00b6 enum DataSource : Enum < DataSource > Entries \u00b6 Name Summary MEMORY Represents an in-memory data source or cache (e.g. Bitmap , ByteBuffer ). MEMORY () DISK Represents a disk-based data source (e.g. DrawableRes , File ). DISK () NETWORK Represents a network-based data source. NETWORK () Functions \u00b6 Name Summary compareTo Content operator override fun compareTo (other: DataSource ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < DataSource > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary name override val name : String ordinal override val ordinal : Int","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/#datasource","text":"enum DataSource : Enum < DataSource >","title":"DataSource"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/#entries","text":"Name Summary MEMORY Represents an in-memory data source or cache (e.g. Bitmap , ByteBuffer ). MEMORY () DISK Represents a disk-based data source (e.g. DrawableRes , File ). DISK () NETWORK Represents a network-based data source. NETWORK ()","title":"Entries"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/#functions","text":"Name Summary compareTo Content operator override fun compareTo (other: DataSource ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < DataSource > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/#properties","text":"Name Summary name override val name : String ordinal override val ordinal : Int","title":"Properties"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-d-i-s-k/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / DataSource / DISK DISK \u00b6 Represents a disk-based data source (e.g. DrawableRes , File ). DISK () Functions \u00b6 Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: DataSource ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < DataSource > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary name override val name : String ordinal override val ordinal : Int","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-d-i-s-k/#disk","text":"Represents a disk-based data source (e.g. DrawableRes , File ). DISK ()","title":"DISK"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-d-i-s-k/#functions","text":"Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: DataSource ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < DataSource > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-d-i-s-k/#properties","text":"Name Summary name override val name : String ordinal override val ordinal : Int","title":"Properties"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-m-e-m-o-r-y/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / DataSource / MEMORY MEMORY \u00b6 Represents an in-memory data source or cache (e.g. Bitmap , ByteBuffer ). MEMORY () Functions \u00b6 Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: DataSource ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < DataSource > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary name override val name : String ordinal override val ordinal : Int","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-m-e-m-o-r-y/#memory","text":"Represents an in-memory data source or cache (e.g. Bitmap , ByteBuffer ). MEMORY ()","title":"MEMORY"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-m-e-m-o-r-y/#functions","text":"Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: DataSource ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < DataSource > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-m-e-m-o-r-y/#properties","text":"Name Summary name override val name : String ordinal override val ordinal : Int","title":"Properties"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-n-e-t-w-o-r-k/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / DataSource / NETWORK NETWORK \u00b6 Represents a network-based data source. NETWORK () Functions \u00b6 Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: DataSource ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < DataSource > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary name override val name : String ordinal override val ordinal : Int","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-n-e-t-w-o-r-k/#network","text":"Represents a network-based data source. NETWORK ()","title":"NETWORK"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-n-e-t-w-o-r-k/#functions","text":"Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: DataSource ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < DataSource > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-data-source/-n-e-t-w-o-r-k/#properties","text":"Name Summary name override val name : String ordinal override val ordinal : Int","title":"Properties"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState ImageLoadState \u00b6 Represents the state of a ImageLoad sealed class ImageLoadState Types \u00b6 Name Summary Empty Indicates that a request is not in progress. Content object Empty : ImageLoadState Error Indicates that an error occurred while executing the request. Content data class Error ( painter : Painter?, throwable : Throwable ) : ImageLoadState Loading Indicates that the request is currently in progress. Content object Loading : ImageLoadState Success Indicates that the request completed successfully. Content data class Success ( painter : Painter, source : DataSource ) : ImageLoadState Functions \u00b6 Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String Inheritors \u00b6 Name ImageLoadState ImageLoadState ImageLoadState ImageLoadState","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/#imageloadstate","text":"Represents the state of a ImageLoad sealed class ImageLoadState","title":"ImageLoadState"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/#types","text":"Name Summary Empty Indicates that a request is not in progress. Content object Empty : ImageLoadState Error Indicates that an error occurred while executing the request. Content data class Error ( painter : Painter?, throwable : Throwable ) : ImageLoadState Loading Indicates that the request is currently in progress. Content object Loading : ImageLoadState Success Indicates that the request completed successfully. Content data class Success ( painter : Painter, source : DataSource ) : ImageLoadState","title":"Types"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/#functions","text":"Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/#inheritors","text":"Name ImageLoadState ImageLoadState ImageLoadState ImageLoadState","title":"Inheritors"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-empty/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Empty Empty \u00b6 Indicates that a request is not in progress. object Empty : ImageLoadState Functions \u00b6 Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-empty/#empty","text":"Indicates that a request is not in progress. object Empty : ImageLoadState","title":"Empty"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-empty/#functions","text":"Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Error Error \u00b6 Indicates that an error occurred while executing the request. data class Error ( painter : Painter?, throwable : Throwable ) : ImageLoadState Parameters \u00b6 Name Summary painter The error image. throwable The optional throwable that caused the request failure. Constructors \u00b6 Name Summary Error The error image.fun Error (painter: Painter?, throwable: Throwable ) Functions \u00b6 Name Summary component1 Content operator fun component1 (): Painter? component2 Content operator fun component2 (): Throwable copy Content fun copy (painter: Painter?, throwable: Throwable ): ImageLoadState.Error equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary painter The error image.val painter : Painter? throwable The optional throwable that caused the request failure.val throwable : Throwable","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/#error","text":"Indicates that an error occurred while executing the request. data class Error ( painter : Painter?, throwable : Throwable ) : ImageLoadState","title":"Error"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/#parameters","text":"Name Summary painter The error image. throwable The optional throwable that caused the request failure.","title":"Parameters"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/#constructors","text":"Name Summary Error The error image.fun Error (painter: Painter?, throwable: Throwable )","title":"Constructors"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/#functions","text":"Name Summary component1 Content operator fun component1 (): Painter? component2 Content operator fun component2 (): Throwable copy Content fun copy (painter: Painter?, throwable: Throwable ): ImageLoadState.Error equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/#properties","text":"Name Summary painter The error image.val painter : Painter? throwable The optional throwable that caused the request failure.val throwable : Throwable","title":"Properties"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/-error/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Error / Error Error \u00b6 Parameters \u00b6 Name Summary painter The error image. throwable The optional throwable that caused the request failure. Content fun Error (painter: Painter?, throwable: Throwable )","title":" error"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/-error/#error","text":"","title":"Error"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/-error/#parameters","text":"Name Summary painter The error image. throwable The optional throwable that caused the request failure. Content fun Error (painter: Painter?, throwable: Throwable )","title":"Parameters"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/component1/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Error / component1 component1 \u00b6 Content operator fun component1 (): Painter?","title":"Component1"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/component1/#component1","text":"Content operator fun component1 (): Painter?","title":"component1"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/component2/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Error / component2 component2 \u00b6 Content operator fun component2 (): Throwable","title":"Component2"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/component2/#component2","text":"Content operator fun component2 (): Throwable","title":"component2"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/copy/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Error / copy copy \u00b6 Content fun copy (painter: Painter?, throwable: Throwable ): ImageLoadState.Error","title":"Copy"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-error/copy/#copy","text":"Content fun copy (painter: Painter?, throwable: Throwable ): ImageLoadState.Error","title":"copy"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-loading/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Loading Loading \u00b6 Indicates that the request is currently in progress. object Loading : ImageLoadState Functions \u00b6 Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-loading/#loading","text":"Indicates that the request is currently in progress. object Loading : ImageLoadState","title":"Loading"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-loading/#functions","text":"Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Success Success \u00b6 Indicates that the request completed successfully. data class Success ( painter : Painter, source : DataSource ) : ImageLoadState Parameters \u00b6 Name Summary painter The result image. source The data source that the image was loaded from. Constructors \u00b6 Name Summary Success The result image.fun Success (painter: Painter, source: DataSource ) Functions \u00b6 Name Summary component1 Content operator fun component1 (): Painter component2 Content operator fun component2 (): DataSource copy Content fun copy (painter: Painter, source: DataSource ): ImageLoadState.Success equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary painter The result image.val painter : Painter source The data source that the image was loaded from.val source : DataSource","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/#success","text":"Indicates that the request completed successfully. data class Success ( painter : Painter, source : DataSource ) : ImageLoadState","title":"Success"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/#parameters","text":"Name Summary painter The result image. source The data source that the image was loaded from.","title":"Parameters"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/#constructors","text":"Name Summary Success The result image.fun Success (painter: Painter, source: DataSource )","title":"Constructors"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/#functions","text":"Name Summary component1 Content operator fun component1 (): Painter component2 Content operator fun component2 (): DataSource copy Content fun copy (painter: Painter, source: DataSource ): ImageLoadState.Success equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/#properties","text":"Name Summary painter The result image.val painter : Painter source The data source that the image was loaded from.val source : DataSource","title":"Properties"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/-success/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Success / Success Success \u00b6 Parameters \u00b6 Name Summary painter The result image. source The data source that the image was loaded from. Content fun Success (painter: Painter, source: DataSource )","title":" success"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/-success/#success","text":"","title":"Success"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/-success/#parameters","text":"Name Summary painter The result image. source The data source that the image was loaded from. Content fun Success (painter: Painter, source: DataSource )","title":"Parameters"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/component1/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Success / component1 component1 \u00b6 Content operator fun component1 (): Painter","title":"Component1"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/component1/#component1","text":"Content operator fun component1 (): Painter","title":"component1"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/component2/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Success / component2 component2 \u00b6 Content operator fun component2 (): DataSource","title":"Component2"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/component2/#component2","text":"Content operator fun component2 (): DataSource","title":"component2"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/copy/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadState / Success / copy copy \u00b6 Content fun copy (painter: Painter, source: DataSource ): ImageLoadState.Success","title":"Copy"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-load-state/-success/copy/#copy","text":"Content fun copy (painter: Painter, source: DataSource ): ImageLoadState.Success","title":"copy"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-loading-color-matrix/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadingColorMatrix ImageLoadingColorMatrix \u00b6 An extension to ColorMatrix which implements the Material Design image loading pattern. class ImageLoadingColorMatrix ( saturation : Float , alpha : Float , brightness : Float ) : ColorMatrix See also \u00b6 Name Summary https ://material.io/archive/guidelines/patterns/loading-images.html Constructors \u00b6 Name Summary ImageLoadingColorMatrix fun ImageLoadingColorMatrix (saturation: Float , alpha: Float , brightness: Float ) Functions \u00b6 Name Summary equals Content open operator override fun equals (other: Any ?): Boolean getArray Content override fun getArray (): FloatArray hashCode Content open override fun hashCode (): Int postConcat Content open override fun postConcat (p0: ColorMatrix ) preConcat Content open override fun preConcat (p0: ColorMatrix ) reset Content open override fun reset () set Content open override fun set (p0: ColorMatrix ) open override fun set (p0: FloatArray ) setConcat Content open override fun setConcat (p0: ColorMatrix , p1: ColorMatrix ) setRGB2YUV Content open override fun setRGB2YUV () setRotate Content open override fun setRotate (p0: Int , p1: Float ) setSaturation Content open override fun setSaturation (p0: Float ) setScale Content open override fun setScale (p0: Float , p1: Float , p2: Float , p3: Float ) setYUV2RGB Content open override fun setYUV2RGB () toString Content open override fun toString (): String Properties \u00b6 Name Summary alphaFraction var alphaFraction : Float brightnessFraction var brightnessFraction : Float saturationFraction var saturationFraction : Float","title":"Index"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-loading-color-matrix/#imageloadingcolormatrix","text":"An extension to ColorMatrix which implements the Material Design image loading pattern. class ImageLoadingColorMatrix ( saturation : Float , alpha : Float , brightness : Float ) : ColorMatrix","title":"ImageLoadingColorMatrix"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-loading-color-matrix/#see-also","text":"Name Summary https ://material.io/archive/guidelines/patterns/loading-images.html","title":"See also"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-loading-color-matrix/#constructors","text":"Name Summary ImageLoadingColorMatrix fun ImageLoadingColorMatrix (saturation: Float , alpha: Float , brightness: Float )","title":"Constructors"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-loading-color-matrix/#functions","text":"Name Summary equals Content open operator override fun equals (other: Any ?): Boolean getArray Content override fun getArray (): FloatArray hashCode Content open override fun hashCode (): Int postConcat Content open override fun postConcat (p0: ColorMatrix ) preConcat Content open override fun preConcat (p0: ColorMatrix ) reset Content open override fun reset () set Content open override fun set (p0: ColorMatrix ) open override fun set (p0: FloatArray ) setConcat Content open override fun setConcat (p0: ColorMatrix , p1: ColorMatrix ) setRGB2YUV Content open override fun setRGB2YUV () setRotate Content open override fun setRotate (p0: Int , p1: Float ) setSaturation Content open override fun setSaturation (p0: Float ) setScale Content open override fun setScale (p0: Float , p1: Float , p2: Float , p3: Float ) setYUV2RGB Content open override fun setYUV2RGB () toString Content open override fun toString (): String","title":"Functions"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-loading-color-matrix/#properties","text":"Name Summary alphaFraction var alphaFraction : Float brightnessFraction var brightnessFraction : Float saturationFraction var saturationFraction : Float","title":"Properties"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-loading-color-matrix/-image-loading-color-matrix/","text":"// imageloading-core / dev.chrisbanes.accompanist.imageloading / ImageLoadingColorMatrix / ImageLoadingColorMatrix ImageLoadingColorMatrix \u00b6 Content fun ImageLoadingColorMatrix (saturation: Float , alpha: Float , brightness: Float )","title":" image loading color matrix"},{"location":"api/imageloading-core/dev.chrisbanes.accompanist.imageloading/-image-loading-color-matrix/-image-loading-color-matrix/#imageloadingcolormatrix","text":"Content fun ImageLoadingColorMatrix (saturation: Float , alpha: Float , brightness: Float )","title":"ImageLoadingColorMatrix"},{"location":"api/insets/","text":"// insets insets \u00b6 Packages \u00b6 Name Summary dev.chrisbanes.accompanist.insets","title":"Insets"},{"location":"api/insets/#insets","text":"","title":"insets"},{"location":"api/insets/#packages","text":"Name Summary dev.chrisbanes.accompanist.insets","title":"Packages"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/","text":"// insets / dev.chrisbanes.accompanist.insets Package dev.chrisbanes.accompanist.insets \u00b6 Types \u00b6 Name Summary HorizontalSide Content enum HorizontalSide : Enum < HorizontalSide > Insets Content @Stable() class Insets VerticalSide Content enum VerticalSide : Enum < VerticalSide > WindowInsets Main holder of our inset values. Content @Stable() class WindowInsets Functions \u00b6 Name Summary add Returns a new PaddingValues with the provided values added to each relevant dimension. Content inline fun PaddingValues. add (start: Dp, top: Dp, end: Dp, bottom: Dp): PaddingValues navigationBarsHeight Declare the preferred height of the content to match the height of the navigation bars when present at the bottom of the screen.This is very handy when used with Spacer to push content below the navigation bars:Column { // Content to be drawn above status bars (y-axis) Spacer(Modifier.navigationBarHeight()) }It's also useful when used to draw a scrim which matches the navigation bars:Spacer( Modifier.navigationBarHeight() .fillMaxWidth() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) )Internally this matches the behavior of the Modifier.height modifier. Content fun Modifier. navigationBarsHeight (additional: Dp): Modifier navigationBarsPadding Apply additional space which matches the height of the navigation bars height along the bottom edge of the content, and additional space which matches the width of the navigation bars on the respective left and right edges. Content fun Modifier. navigationBarsPadding (bottom: Boolean , left: Boolean , right: Boolean ): Modifier navigationBarsWidth Declare the preferred width of the content to match the width of the navigation bars, on the given side.This is very handy when used with Spacer to push content inside from any vertical navigation bars (typically when the device is in landscape):Row { Spacer(Modifier.navigationBarWidth(HorizontalSide.Left)) // Content to be inside the navigation bars (x-axis) Spacer(Modifier.navigationBarWidth(HorizontalSide.Right)) }It's also useful when used to draw a scrim which matches the navigation bars:Spacer( Modifier.navigationBarWidth(HorizontalSide.Left) .fillMaxHeight() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) )Internally this matches the behavior of the Modifier.height modifier. Content fun Modifier. navigationBarsWidth (side: HorizontalSide , additional: Dp): Modifier ProvideWindowInsets Applies any WindowInsetsCompat values to AmbientWindowInsets , which are then available within content. Content @Composable() fun ProvideWindowInsets (consumeWindowInsets: Boolean , content: () -> Unit ) statusBarsHeight Declare the height of the content to match the height of the status bars exactly.This is very handy when used with Spacer to push content below the status bars:Column { Spacer(Modifier.statusBarHeight()) // Content to be drawn below status bars (y-axis) }It's also useful when used to draw a scrim which matches the status bars:Spacer( Modifier.statusBarHeight() .fillMaxWidth() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) )Internally this matches the behavior of the Modifier.height modifier. Content fun Modifier. statusBarsHeight (additional: Dp): Modifier statusBarsPadding Apply additional space which matches the height of the status bars height along the top edge of the content. Content fun Modifier. statusBarsPadding (): Modifier systemBarsPadding Selectively apply additional space which matches the width/height of any system bars present on the respective edges of the screen. Content fun Modifier. systemBarsPadding (enabled: Boolean ): Modifier toPaddingValues Returns the current insets converted into a PaddingValues. Content @Composable() fun Insets . toPaddingValues (start: Boolean , top: Boolean , end: Boolean , bottom: Boolean ): PaddingValues Properties \u00b6 Name Summary AmbientWindowInsets val AmbientWindowInsets : ProvidableAmbient< WindowInsets >","title":"Index"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/#package-devchrisbanesaccompanistinsets","text":"","title":"Package dev.chrisbanes.accompanist.insets"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/#types","text":"Name Summary HorizontalSide Content enum HorizontalSide : Enum < HorizontalSide > Insets Content @Stable() class Insets VerticalSide Content enum VerticalSide : Enum < VerticalSide > WindowInsets Main holder of our inset values. Content @Stable() class WindowInsets","title":"Types"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/#functions","text":"Name Summary add Returns a new PaddingValues with the provided values added to each relevant dimension. Content inline fun PaddingValues. add (start: Dp, top: Dp, end: Dp, bottom: Dp): PaddingValues navigationBarsHeight Declare the preferred height of the content to match the height of the navigation bars when present at the bottom of the screen.This is very handy when used with Spacer to push content below the navigation bars:Column { // Content to be drawn above status bars (y-axis) Spacer(Modifier.navigationBarHeight()) }It's also useful when used to draw a scrim which matches the navigation bars:Spacer( Modifier.navigationBarHeight() .fillMaxWidth() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) )Internally this matches the behavior of the Modifier.height modifier. Content fun Modifier. navigationBarsHeight (additional: Dp): Modifier navigationBarsPadding Apply additional space which matches the height of the navigation bars height along the bottom edge of the content, and additional space which matches the width of the navigation bars on the respective left and right edges. Content fun Modifier. navigationBarsPadding (bottom: Boolean , left: Boolean , right: Boolean ): Modifier navigationBarsWidth Declare the preferred width of the content to match the width of the navigation bars, on the given side.This is very handy when used with Spacer to push content inside from any vertical navigation bars (typically when the device is in landscape):Row { Spacer(Modifier.navigationBarWidth(HorizontalSide.Left)) // Content to be inside the navigation bars (x-axis) Spacer(Modifier.navigationBarWidth(HorizontalSide.Right)) }It's also useful when used to draw a scrim which matches the navigation bars:Spacer( Modifier.navigationBarWidth(HorizontalSide.Left) .fillMaxHeight() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) )Internally this matches the behavior of the Modifier.height modifier. Content fun Modifier. navigationBarsWidth (side: HorizontalSide , additional: Dp): Modifier ProvideWindowInsets Applies any WindowInsetsCompat values to AmbientWindowInsets , which are then available within content. Content @Composable() fun ProvideWindowInsets (consumeWindowInsets: Boolean , content: () -> Unit ) statusBarsHeight Declare the height of the content to match the height of the status bars exactly.This is very handy when used with Spacer to push content below the status bars:Column { Spacer(Modifier.statusBarHeight()) // Content to be drawn below status bars (y-axis) }It's also useful when used to draw a scrim which matches the status bars:Spacer( Modifier.statusBarHeight() .fillMaxWidth() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) )Internally this matches the behavior of the Modifier.height modifier. Content fun Modifier. statusBarsHeight (additional: Dp): Modifier statusBarsPadding Apply additional space which matches the height of the status bars height along the top edge of the content. Content fun Modifier. statusBarsPadding (): Modifier systemBarsPadding Selectively apply additional space which matches the width/height of any system bars present on the respective edges of the screen. Content fun Modifier. systemBarsPadding (enabled: Boolean ): Modifier toPaddingValues Returns the current insets converted into a PaddingValues. Content @Composable() fun Insets . toPaddingValues (start: Boolean , top: Boolean , end: Boolean , bottom: Boolean ): PaddingValues","title":"Functions"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/#properties","text":"Name Summary AmbientWindowInsets val AmbientWindowInsets : ProvidableAmbient< WindowInsets >","title":"Properties"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-provide-window-insets/","text":"// insets / dev.chrisbanes.accompanist.insets / ProvideWindowInsets ProvideWindowInsets \u00b6 Applies any WindowInsetsCompat values to AmbientWindowInsets , which are then available within content. Parameters \u00b6 Name Summary consumeWindowInsets Whether to consume any WindowInsetsCompat s which are dispatched to the host view. Defaults to true. Content @Composable() fun ProvideWindowInsets (consumeWindowInsets: Boolean , content: () -> Unit )","title":" provide window insets"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-provide-window-insets/#providewindowinsets","text":"Applies any WindowInsetsCompat values to AmbientWindowInsets , which are then available within content.","title":"ProvideWindowInsets"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-provide-window-insets/#parameters","text":"Name Summary consumeWindowInsets Whether to consume any WindowInsetsCompat s which are dispatched to the host view. Defaults to true. Content @Composable() fun ProvideWindowInsets (consumeWindowInsets: Boolean , content: () -> Unit )","title":"Parameters"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/add/","text":"// insets / dev.chrisbanes.accompanist.insets / add add \u00b6 Returns a new PaddingValues with the provided values added to each relevant dimension. Parameters \u00b6 Name Summary bottom Value to add to the bottom dimension. end Value to add to the end dimension. start Value to add to the start dimension. top Value to add to the top dimension. Content inline fun PaddingValues. add (start: Dp, top: Dp, end: Dp, bottom: Dp): PaddingValues","title":"Add"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/add/#add","text":"Returns a new PaddingValues with the provided values added to each relevant dimension.","title":"add"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/add/#parameters","text":"Name Summary bottom Value to add to the bottom dimension. end Value to add to the end dimension. start Value to add to the start dimension. top Value to add to the top dimension. Content inline fun PaddingValues. add (start: Dp, top: Dp, end: Dp, bottom: Dp): PaddingValues","title":"Parameters"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/navigation-bars-height/","text":"// insets / dev.chrisbanes.accompanist.insets / navigationBarsHeight navigationBarsHeight \u00b6 Declare the preferred height of the content to match the height of the navigation bars when present at the bottom of the screen. This is very handy when used with Spacer to push content below the navigation bars: Column { // Content to be drawn above status bars (y-axis) Spacer(Modifier.navigationBarHeight()) } It's also useful when used to draw a scrim which matches the navigation bars: Spacer( Modifier.navigationBarHeight() .fillMaxWidth() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) ) Internally this matches the behavior of the Modifier.height modifier. Parameters \u00b6 Name Summary additional Any additional height to add to the status bars size. Content fun Modifier. navigationBarsHeight (additional: Dp): Modifier","title":"Navigation bars height"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/navigation-bars-height/#navigationbarsheight","text":"Declare the preferred height of the content to match the height of the navigation bars when present at the bottom of the screen. This is very handy when used with Spacer to push content below the navigation bars: Column { // Content to be drawn above status bars (y-axis) Spacer(Modifier.navigationBarHeight()) } It's also useful when used to draw a scrim which matches the navigation bars: Spacer( Modifier.navigationBarHeight() .fillMaxWidth() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) ) Internally this matches the behavior of the Modifier.height modifier.","title":"navigationBarsHeight"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/navigation-bars-height/#parameters","text":"Name Summary additional Any additional height to add to the status bars size. Content fun Modifier. navigationBarsHeight (additional: Dp): Modifier","title":"Parameters"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/navigation-bars-padding/","text":"// insets / dev.chrisbanes.accompanist.insets / navigationBarsPadding navigationBarsPadding \u00b6 Apply additional space which matches the height of the navigation bars height along the bottom edge of the content, and additional space which matches the width of the navigation bars on the respective left and right edges. Parameters \u00b6 Name Summary bottom Whether to apply padding to the bottom edge, which matches the navigation bars height (if present) at the bottom edge of the screen. Defaults to true. left Whether to apply padding to the left edge, which matches the navigation bars width (if present) on the left edge of the screen. Defaults to true. right Whether to apply padding to the right edge, which matches the navigation bars width (if present) on the right edge of the screen. Defaults to true. Content fun Modifier. navigationBarsPadding (bottom: Boolean , left: Boolean , right: Boolean ): Modifier","title":"Navigation bars padding"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/navigation-bars-padding/#navigationbarspadding","text":"Apply additional space which matches the height of the navigation bars height along the bottom edge of the content, and additional space which matches the width of the navigation bars on the respective left and right edges.","title":"navigationBarsPadding"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/navigation-bars-padding/#parameters","text":"Name Summary bottom Whether to apply padding to the bottom edge, which matches the navigation bars height (if present) at the bottom edge of the screen. Defaults to true. left Whether to apply padding to the left edge, which matches the navigation bars width (if present) on the left edge of the screen. Defaults to true. right Whether to apply padding to the right edge, which matches the navigation bars width (if present) on the right edge of the screen. Defaults to true. Content fun Modifier. navigationBarsPadding (bottom: Boolean , left: Boolean , right: Boolean ): Modifier","title":"Parameters"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/navigation-bars-width/","text":"// insets / dev.chrisbanes.accompanist.insets / navigationBarsWidth navigationBarsWidth \u00b6 Declare the preferred width of the content to match the width of the navigation bars, on the given side. This is very handy when used with Spacer to push content inside from any vertical navigation bars (typically when the device is in landscape): Row { Spacer(Modifier.navigationBarWidth(HorizontalSide.Left)) // Content to be inside the navigation bars (x-axis) Spacer(Modifier.navigationBarWidth(HorizontalSide.Right)) } It's also useful when used to draw a scrim which matches the navigation bars: Spacer( Modifier.navigationBarWidth(HorizontalSide.Left) .fillMaxHeight() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) ) Internally this matches the behavior of the Modifier.height modifier. Parameters \u00b6 Name Summary additional Any additional width to add to the status bars size. side The navigation bar side to use as the source for the width. Content fun Modifier. navigationBarsWidth (side: HorizontalSide , additional: Dp): Modifier","title":"Navigation bars width"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/navigation-bars-width/#navigationbarswidth","text":"Declare the preferred width of the content to match the width of the navigation bars, on the given side. This is very handy when used with Spacer to push content inside from any vertical navigation bars (typically when the device is in landscape): Row { Spacer(Modifier.navigationBarWidth(HorizontalSide.Left)) // Content to be inside the navigation bars (x-axis) Spacer(Modifier.navigationBarWidth(HorizontalSide.Right)) } It's also useful when used to draw a scrim which matches the navigation bars: Spacer( Modifier.navigationBarWidth(HorizontalSide.Left) .fillMaxHeight() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) ) Internally this matches the behavior of the Modifier.height modifier.","title":"navigationBarsWidth"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/navigation-bars-width/#parameters","text":"Name Summary additional Any additional width to add to the status bars size. side The navigation bar side to use as the source for the width. Content fun Modifier. navigationBarsWidth (side: HorizontalSide , additional: Dp): Modifier","title":"Parameters"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/status-bars-height/","text":"// insets / dev.chrisbanes.accompanist.insets / statusBarsHeight statusBarsHeight \u00b6 Declare the height of the content to match the height of the status bars exactly. This is very handy when used with Spacer to push content below the status bars: Column { Spacer(Modifier.statusBarHeight()) // Content to be drawn below status bars (y-axis) } It's also useful when used to draw a scrim which matches the status bars: Spacer( Modifier.statusBarHeight() .fillMaxWidth() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) ) Internally this matches the behavior of the Modifier.height modifier. Parameters \u00b6 Name Summary additional Any additional height to add to the status bars size. Content fun Modifier. statusBarsHeight (additional: Dp): Modifier","title":"Status bars height"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/status-bars-height/#statusbarsheight","text":"Declare the height of the content to match the height of the status bars exactly. This is very handy when used with Spacer to push content below the status bars: Column { Spacer(Modifier.statusBarHeight()) // Content to be drawn below status bars (y-axis) } It's also useful when used to draw a scrim which matches the status bars: Spacer( Modifier.statusBarHeight() .fillMaxWidth() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) ) Internally this matches the behavior of the Modifier.height modifier.","title":"statusBarsHeight"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/status-bars-height/#parameters","text":"Name Summary additional Any additional height to add to the status bars size. Content fun Modifier. statusBarsHeight (additional: Dp): Modifier","title":"Parameters"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/status-bars-padding/","text":"// insets / dev.chrisbanes.accompanist.insets / statusBarsPadding statusBarsPadding \u00b6 Apply additional space which matches the height of the status bars height along the top edge of the content. Content fun Modifier. statusBarsPadding (): Modifier","title":"Status bars padding"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/status-bars-padding/#statusbarspadding","text":"Apply additional space which matches the height of the status bars height along the top edge of the content. Content fun Modifier. statusBarsPadding (): Modifier","title":"statusBarsPadding"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/system-bars-padding/","text":"// insets / dev.chrisbanes.accompanist.insets / systemBarsPadding systemBarsPadding \u00b6 Selectively apply additional space which matches the width/height of any system bars present on the respective edges of the screen. Parameters \u00b6 Name Summary enabled Whether to apply padding using the system bars dimensions on the respective edges. Defaults to true. Content fun Modifier. systemBarsPadding (enabled: Boolean ): Modifier","title":"System bars padding"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/system-bars-padding/#systembarspadding","text":"Selectively apply additional space which matches the width/height of any system bars present on the respective edges of the screen.","title":"systemBarsPadding"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/system-bars-padding/#parameters","text":"Name Summary enabled Whether to apply padding using the system bars dimensions on the respective edges. Defaults to true. Content fun Modifier. systemBarsPadding (enabled: Boolean ): Modifier","title":"Parameters"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/to-padding-values/","text":"// insets / dev.chrisbanes.accompanist.insets / toPaddingValues toPaddingValues \u00b6 Returns the current insets converted into a PaddingValues. Parameters \u00b6 Name Summary bottom Whether to apply the inset on the bottom dimension. end Whether to apply the inset on the end dimension. start Whether to apply the inset on the start dimension. top Whether to apply the inset on the top dimension. Content @Composable() fun Insets . toPaddingValues (start: Boolean , top: Boolean , end: Boolean , bottom: Boolean ): PaddingValues","title":"To padding values"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/to-padding-values/#topaddingvalues","text":"Returns the current insets converted into a PaddingValues.","title":"toPaddingValues"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/to-padding-values/#parameters","text":"Name Summary bottom Whether to apply the inset on the bottom dimension. end Whether to apply the inset on the end dimension. start Whether to apply the inset on the start dimension. top Whether to apply the inset on the top dimension. Content @Composable() fun Insets . toPaddingValues (start: Boolean , top: Boolean , end: Boolean , bottom: Boolean ): PaddingValues","title":"Parameters"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/","text":"// insets / dev.chrisbanes.accompanist.insets / HorizontalSide HorizontalSide \u00b6 enum HorizontalSide : Enum < HorizontalSide > Entries \u00b6 Name Summary Left Left () Right Right () Functions \u00b6 Name Summary compareTo Content operator override fun compareTo (other: HorizontalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < HorizontalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary name override val name : String ordinal override val ordinal : Int","title":"Index"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/#horizontalside","text":"enum HorizontalSide : Enum < HorizontalSide >","title":"HorizontalSide"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/#entries","text":"Name Summary Left Left () Right Right ()","title":"Entries"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/#functions","text":"Name Summary compareTo Content operator override fun compareTo (other: HorizontalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < HorizontalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/#properties","text":"Name Summary name override val name : String ordinal override val ordinal : Int","title":"Properties"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/-left/","text":"// insets / dev.chrisbanes.accompanist.insets / HorizontalSide / Left Left \u00b6 Left () Functions \u00b6 Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: HorizontalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < HorizontalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary name override val name : String ordinal override val ordinal : Int","title":"Index"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/-left/#left","text":"Left ()","title":"Left"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/-left/#functions","text":"Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: HorizontalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < HorizontalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/-left/#properties","text":"Name Summary name override val name : String ordinal override val ordinal : Int","title":"Properties"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/-right/","text":"// insets / dev.chrisbanes.accompanist.insets / HorizontalSide / Right Right \u00b6 Right () Functions \u00b6 Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: HorizontalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < HorizontalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary name override val name : String ordinal override val ordinal : Int","title":"Index"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/-right/#right","text":"Right ()","title":"Right"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/-right/#functions","text":"Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: HorizontalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < HorizontalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-horizontal-side/-right/#properties","text":"Name Summary name override val name : String ordinal override val ordinal : Int","title":"Properties"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-insets/","text":"// insets / dev.chrisbanes.accompanist.insets / Insets Insets \u00b6 @Stable() class Insets Functions \u00b6 Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary bottom The bottom dimension of these insets in pixels.var bottom : Int isVisible Whether the insets are currently visible.var isVisible : Boolean left The left dimension of these insets in pixels.var left : Int right The right dimension of these insets in pixels.var right : Int top The top dimension of these insets in pixels.var top : Int Extensions \u00b6 Name Summary toPaddingValues Returns the current insets converted into a PaddingValues. Content @Composable() fun Insets . toPaddingValues (start: Boolean , top: Boolean , end: Boolean , bottom: Boolean ): PaddingValues","title":"Index"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-insets/#insets","text":"@Stable() class Insets","title":"Insets"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-insets/#functions","text":"Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-insets/#properties","text":"Name Summary bottom The bottom dimension of these insets in pixels.var bottom : Int isVisible Whether the insets are currently visible.var isVisible : Boolean left The left dimension of these insets in pixels.var left : Int right The right dimension of these insets in pixels.var right : Int top The top dimension of these insets in pixels.var top : Int","title":"Properties"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-insets/#extensions","text":"Name Summary toPaddingValues Returns the current insets converted into a PaddingValues. Content @Composable() fun Insets . toPaddingValues (start: Boolean , top: Boolean , end: Boolean , bottom: Boolean ): PaddingValues","title":"Extensions"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-insets/-insets/","text":"// insets / dev.chrisbanes.accompanist.insets / Insets / Insets Insets \u00b6 Content fun Insets ()","title":" insets"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-insets/-insets/#insets","text":"Content fun Insets ()","title":"Insets"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/","text":"// insets / dev.chrisbanes.accompanist.insets / VerticalSide VerticalSide \u00b6 enum VerticalSide : Enum < VerticalSide > Entries \u00b6 Name Summary Top Top () Bottom Bottom () Functions \u00b6 Name Summary compareTo Content operator override fun compareTo (other: VerticalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < VerticalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary name override val name : String ordinal override val ordinal : Int","title":"Index"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/#verticalside","text":"enum VerticalSide : Enum < VerticalSide >","title":"VerticalSide"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/#entries","text":"Name Summary Top Top () Bottom Bottom ()","title":"Entries"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/#functions","text":"Name Summary compareTo Content operator override fun compareTo (other: VerticalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < VerticalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/#properties","text":"Name Summary name override val name : String ordinal override val ordinal : Int","title":"Properties"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/-bottom/","text":"// insets / dev.chrisbanes.accompanist.insets / VerticalSide / Bottom Bottom \u00b6 Bottom () Functions \u00b6 Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: VerticalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < VerticalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary name override val name : String ordinal override val ordinal : Int","title":"Index"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/-bottom/#bottom","text":"Bottom ()","title":"Bottom"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/-bottom/#functions","text":"Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: VerticalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < VerticalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/-bottom/#properties","text":"Name Summary name override val name : String ordinal override val ordinal : Int","title":"Properties"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/-top/","text":"// insets / dev.chrisbanes.accompanist.insets / VerticalSide / Top Top \u00b6 Top () Functions \u00b6 Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: VerticalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < VerticalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary name override val name : String ordinal override val ordinal : Int","title":"Index"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/-top/#top","text":"Top ()","title":"Top"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/-top/#functions","text":"Name Summary clone Content protected override fun clone (): Any compareTo Content operator override fun compareTo (other: VerticalSide ): Int equals Content operator override fun equals (other: Any ?): Boolean finalize Content override fun finalize () getDeclaringClass Content override fun getDeclaringClass (): Class < VerticalSide > hashCode Content override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-vertical-side/-top/#properties","text":"Name Summary name override val name : String ordinal override val ordinal : Int","title":"Properties"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-window-insets/","text":"// insets / dev.chrisbanes.accompanist.insets / WindowInsets WindowInsets \u00b6 Main holder of our inset values. @Stable() class WindowInsets Constructors \u00b6 Name Summary WindowInsets fun WindowInsets () Functions \u00b6 Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String Properties \u00b6 Name Summary ime Inset values which match WindowInsetsCompat.Type.ime val ime : Insets navigationBars Inset values which match WindowInsetsCompat.Type.navigationBars val navigationBars : Insets statusBars Inset values which match WindowInsetsCompat.Type.statusBars val statusBars : Insets systemBars Inset values which match WindowInsetsCompat.Type.systemBars val systemBars : Insets systemGestures Inset values which match WindowInsetsCompat.Type.systemGestures val systemGestures : Insets","title":"Index"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-window-insets/#windowinsets","text":"Main holder of our inset values. @Stable() class WindowInsets","title":"WindowInsets"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-window-insets/#constructors","text":"Name Summary WindowInsets fun WindowInsets ()","title":"Constructors"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-window-insets/#functions","text":"Name Summary equals Content open operator override fun equals (other: Any ?): Boolean hashCode Content open override fun hashCode (): Int toString Content open override fun toString (): String","title":"Functions"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-window-insets/#properties","text":"Name Summary ime Inset values which match WindowInsetsCompat.Type.ime val ime : Insets navigationBars Inset values which match WindowInsetsCompat.Type.navigationBars val navigationBars : Insets statusBars Inset values which match WindowInsetsCompat.Type.statusBars val statusBars : Insets systemBars Inset values which match WindowInsetsCompat.Type.systemBars val systemBars : Insets systemGestures Inset values which match WindowInsetsCompat.Type.systemGestures val systemGestures : Insets","title":"Properties"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-window-insets/-window-insets/","text":"// insets / dev.chrisbanes.accompanist.insets / WindowInsets / WindowInsets WindowInsets \u00b6 Content fun WindowInsets ()","title":" window insets"},{"location":"api/insets/dev.chrisbanes.accompanist.insets/-window-insets/-window-insets/#windowinsets","text":"Content fun WindowInsets ()","title":"WindowInsets"},{"location":"api/picasso/","text":"// picasso picasso \u00b6 Packages \u00b6 Name Summary dev.chrisbanes.accompanist.picasso","title":"Picasso"},{"location":"api/picasso/#picasso","text":"","title":"picasso"},{"location":"api/picasso/#packages","text":"Name Summary dev.chrisbanes.accompanist.picasso","title":"Packages"},{"location":"api/picasso/dev.chrisbanes.accompanist.picasso/","text":"// picasso / dev.chrisbanes.accompanist.picasso Package dev.chrisbanes.accompanist.picasso \u00b6 Functions \u00b6 Name Summary PicassoImage Creates a composable that will attempt to load the given data using Picasso, and provides complete content of how the current state is displayed:PicassoImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Content @Composable() fun PicassoImage (data: Any , modifier: Modifier, picasso: Picasso, requestBuilder: RequestCreator.(IntSize) -> RequestCreator?, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Picasso, and then display the result in an Image.This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. PicassoImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Content @Composable() fun PicassoImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , picasso: Picasso, requestBuilder: RequestCreator.(IntSize) -> RequestCreator?, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?) Properties \u00b6 Name Summary AmbientPicasso Ambient containing the preferred Picasso to use in PicassoImage . Defaults to Picasso.get.val AmbientPicasso : ProvidableAmbient","title":"Index"},{"location":"api/picasso/dev.chrisbanes.accompanist.picasso/#package-devchrisbanesaccompanistpicasso","text":"","title":"Package dev.chrisbanes.accompanist.picasso"},{"location":"api/picasso/dev.chrisbanes.accompanist.picasso/#functions","text":"Name Summary PicassoImage Creates a composable that will attempt to load the given data using Picasso, and provides complete content of how the current state is displayed:PicassoImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Content @Composable() fun PicassoImage (data: Any , modifier: Modifier, picasso: Picasso, requestBuilder: RequestCreator.(IntSize) -> RequestCreator?, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Picasso, and then display the result in an Image.This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. PicassoImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Content @Composable() fun PicassoImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , picasso: Picasso, requestBuilder: RequestCreator.(IntSize) -> RequestCreator?, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?)","title":"Functions"},{"location":"api/picasso/dev.chrisbanes.accompanist.picasso/#properties","text":"Name Summary AmbientPicasso Ambient containing the preferred Picasso to use in PicassoImage . Defaults to Picasso.get.val AmbientPicasso : ProvidableAmbient","title":"Properties"},{"location":"api/picasso/dev.chrisbanes.accompanist.picasso/-picasso-image/","text":"// picasso / dev.chrisbanes.accompanist.picasso / PicassoImage PicassoImage \u00b6 Creates a composable that will attempt to load the given data using Picasso, and provides complete content of how the current state is displayed: PicassoImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } } Parameters \u00b6 Name Summary content Content to be displayed for the given state. data The data to load. See RequestCreator.data for the types allowed. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. picasso The Picasso instance to use for requests. Defaults to the current value of AmbientPicasso . requestBuilder Optional builder for the RequestCreator. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun PicassoImage (data: Any , modifier: Modifier, picasso: Picasso, requestBuilder: RequestCreator.(IntSize) -> RequestCreator?, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Picasso, and then display the result in an Image. This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. PicassoImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } ) Parameters \u00b6 Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. data The data to load. See RequestCreator.data for the types allowed. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. picasso The Picasso instance to use for requests. Defaults to the current value of AmbientPicasso . requestBuilder Optional builder for the RequestCreator. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun PicassoImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , picasso: Picasso, requestBuilder: RequestCreator.(IntSize) -> RequestCreator?, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?)","title":" picasso image"},{"location":"api/picasso/dev.chrisbanes.accompanist.picasso/-picasso-image/#picassoimage","text":"Creates a composable that will attempt to load the given data using Picasso, and provides complete content of how the current state is displayed: PicassoImage( data = \"https://www.image.url\", ) { imageState -> when (imageState) { is ImageLoadState.Success -> // TODO is ImageLoadState.Error -> // TODO ImageLoadState.Loading -> // TODO ImageLoadState.Empty -> // TODO } }","title":"PicassoImage"},{"location":"api/picasso/dev.chrisbanes.accompanist.picasso/-picasso-image/#parameters","text":"Name Summary content Content to be displayed for the given state. data The data to load. See RequestCreator.data for the types allowed. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. picasso The Picasso instance to use for requests. Defaults to the current value of AmbientPicasso . requestBuilder Optional builder for the RequestCreator. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun PicassoImage (data: Any , modifier: Modifier, picasso: Picasso, requestBuilder: RequestCreator.(IntSize) -> RequestCreator?, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , content: (ImageLoadState) -> Unit ) Creates a composable that will attempt to load the given data using Picasso, and then display the result in an Image. This version of the function is more opinionated, providing: Support for displaying alternative content while the request is 'loading'. See the loading parameter. Support for displaying alternative content if the request was unsuccessful. See the error parameter. Support for automatically fading-in the image once loaded. See the fadeIn parameter. PicassoImage( data = \"https://www.image.url\", fadeIn = true, loading = { Stack(Modifier.fillMaxSize()) { CircularProgressIndicator(Modifier.align(Alignment.Center)) } } )","title":"Parameters"},{"location":"api/picasso/dev.chrisbanes.accompanist.picasso/-picasso-image/#parameters_1","text":"Name Summary alignment Optional alignment parameter used to place the loaded ImageAsset in the given bounds defined by the width and height. colorFilter Optional colorFilter to apply for the Painter when it is rendered onscreen. contentScale Optional scale parameter used to determine the aspect ratio scaling to be used if the bounds are a different size from the intrinsic size of the loaded ImageAsset. data The data to load. See RequestCreator.data for the types allowed. error Content to be displayed when the request failed. fadeIn Whether to run a fade-in animation when images are successfully loaded. Default: false. loading Content to be displayed when the request is in progress. modifier Modifier used to adjust the layout algorithm or draw decoration content. onRequestCompleted Listener which will be called when the loading request has finished. picasso The Picasso instance to use for requests. Defaults to the current value of AmbientPicasso . requestBuilder Optional builder for the RequestCreator. shouldRefetchOnSizeChange Lambda which will be invoked when the size changes, allowing optional re-fetching of the image. Return true to re-fetch the image. Content @Composable() fun PicassoImage (data: Any , modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: Boolean , picasso: Picasso, requestBuilder: RequestCreator.(IntSize) -> RequestCreator?, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> Boolean , onRequestCompleted: (ImageLoadState) -> Unit , error: (ImageLoadState.Error) -> Unit ?, loading: () -> Unit ?)","title":"Parameters"}]}