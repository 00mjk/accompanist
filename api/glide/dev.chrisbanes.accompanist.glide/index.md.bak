//[glide](../index.md)/[dev.chrisbanes.accompanist.glide](index.md)



# Package dev.chrisbanes.accompanist.glide  


## Types  
  
|  Name|  Summary| 
|---|---|
| [GlideImageConstants](-glide-image-constants/index.md)|   <br>Content  <br>object [GlideImageConstants](-glide-image-constants/index.md)  <br>


## Functions  
  
|  Name|  Summary| 
|---|---|
| [GlideImage](-glide-image.md)|   <br>Brief description  <br>Creates a composable that will attempt to load the given data using Glide, and provides complete content of how the current state is displayed:GlideImage(  <br>  data = "https://www.image.url",  <br>) { imageState ->  <br>  when (imageState) {  <br>    is ImageLoadState.Success -> // TODO  <br>    is ImageLoadState.Error -> // TODO  <br>    ImageLoadState.Loading -> // TODO  <br>    ImageLoadState.Empty -> // TODO  <br>  }  <br>}  <br>Content  <br>@Composable()  <br>  <br>fun [GlideImage](-glide-image.md)(data: [Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html), modifier: Modifier, requestBuilder: RequestBuilder<[Drawable](https://developer.android.com/reference/kotlin/android/graphics/drawable/Drawable.html)>.(IntSize) -> RequestBuilder<[Drawable](https://developer.android.com/reference/kotlin/android/graphics/drawable/Drawable.html)>?, requestManager: RequestManager, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), onRequestCompleted: (ImageLoadState) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html), content: (ImageLoadState) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html))  <br>  <br>Brief description  <br>Creates a composable that will attempt to load the given data using Glide, and then display the result in an Image.This version of the function is more opinionated, providing:<ul><li>Support for displaying alternative content while the request is 'loading'. See the loading parameter.</li><li>Support for displaying alternative content if the request was unsuccessful. See the error parameter.</li><li>Support for automatically fading-in the image once loaded. See the fadeIn parameter.</li></ul>GlideImage(  <br>  data = "https://www.image.url",  <br>  fadeIn = true,  <br>  loading = {  <br>    Stack(Modifier.fillMaxSize()) {  <br>      CircularProgressIndicator(Modifier.align(Alignment.Center))  <br>    }  <br>  }  <br>)  <br>Content  <br>@Composable()  <br>  <br>fun [GlideImage](-glide-image.md)(data: [Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html), modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), requestBuilder: RequestBuilder<[Drawable](https://developer.android.com/reference/kotlin/android/graphics/drawable/Drawable.html)>.(IntSize) -> RequestBuilder<[Drawable](https://developer.android.com/reference/kotlin/android/graphics/drawable/Drawable.html)>?, requestManager: RequestManager, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), onRequestCompleted: (ImageLoadState) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html), error: (ImageLoadState.Error) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?, loading: () -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?)  <br>


## Properties  
  
|  Name|  Summary| 
|---|---|
| [AmbientRequestManager](index.md#dev.chrisbanes.accompanist.glide//AmbientRequestManager/#/PointingToDeclaration/)|   Ambient containing the preferred RequestManager to use in [GlideImage](-glide-image.md).val [AmbientRequestManager](index.md#dev.chrisbanes.accompanist.glide//AmbientRequestManager/#/PointingToDeclaration/): ProvidableAmbient<RequestManager?>   <br>

