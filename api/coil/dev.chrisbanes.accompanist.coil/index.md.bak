//[coil](../index.md)/[dev.chrisbanes.accompanist.coil](index.md)



# Package dev.chrisbanes.accompanist.coil  


## Types  
  
|  Name|  Summary| 
|---|---|
| [ErrorResult](index.md#dev.chrisbanes.accompanist.coil/ErrorResult///PointingToDeclaration/)|   <br>Content  <br>typealias [ErrorResult](index.md#dev.chrisbanes.accompanist.coil/ErrorResult///PointingToDeclaration/) = ImageLoadState.Error  <br>
| [RequestResult](index.md#dev.chrisbanes.accompanist.coil/RequestResult///PointingToDeclaration/)|   <br>Content  <br>typealias [RequestResult](index.md#dev.chrisbanes.accompanist.coil/RequestResult///PointingToDeclaration/) = ImageLoadState  <br>
| [SuccessResult](index.md#dev.chrisbanes.accompanist.coil/SuccessResult///PointingToDeclaration/)|   <br>Content  <br>typealias [SuccessResult](index.md#dev.chrisbanes.accompanist.coil/SuccessResult///PointingToDeclaration/) = ImageLoadState.Success  <br>


## Functions  
  
|  Name|  Summary| 
|---|---|
| [CoilImage](-coil-image.md)|   <br>Brief description  <br>Creates a composable that will attempt to load the given request using Coil, and provides complete content of how the current state is displayed:CoilImage(  <br>  request = ImageRequest.Builder(context).data(...).build(),  <br>) { imageState ->  <br>  when (imageState) {  <br>    is ImageLoadState.Success -> // TODO  <br>    is ImageLoadState.Error -> // TODO  <br>    ImageLoadState.Loading -> // TODO  <br>    ImageLoadState.Empty -> // TODO  <br>  }  <br>}  <br>Content  <br>@Composable()  <br>  <br>fun [CoilImage](-coil-image.md)(request: ImageRequest, modifier: Modifier, requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), onRequestCompleted: (ImageLoadState) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html), content: (ImageLoadState) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html))  <br>  <br>Brief description  <br>Creates a composable that will attempt to load the given data using Coil, and provides complete content of how the current state is displayed:CoilImage(  <br>  data = "https://www.image.url",  <br>) { imageState ->  <br>  when (imageState) {  <br>    is ImageLoadState.Success -> // TODO  <br>    is ImageLoadState.Error -> // TODO  <br>    ImageLoadState.Loading -> // TODO  <br>    ImageLoadState.Empty -> // TODO  <br>  }  <br>}  <br>Content  <br>@Composable()  <br>  <br>fun [CoilImage](-coil-image.md)(data: [Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html), modifier: Modifier, requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), onRequestCompleted: (ImageLoadState) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html), content: (ImageLoadState) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html))  <br>  <br>Brief description  <br>Creates a composable that will attempt to load the given request using Coil, and then display the result in an Image.This version of the function is more opinionated, providing:<ul><li>Support for displaying alternative content while the request is 'loading'. See the loading parameter.</li><li>Support for displaying alternative content if the request was unsuccessful. See the error parameter.</li><li>Support for automatically fading-in the image once loaded. See the fadeIn parameter.</li></ul>CoilImage(  <br>  request = ImageRequest.Builder(context).data(...).build(),  <br>  fadeIn = true,  <br>  loading = {  <br>    Stack(Modifier.fillMaxSize()) {  <br>      CircularProgressIndicator(Modifier.align(Alignment.Center))  <br>    }  <br>  }  <br>)  <br>Content  <br>@Composable()  <br>  <br>fun [CoilImage](-coil-image.md)(request: ImageRequest, modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), onRequestCompleted: (ImageLoadState) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html), error: (ImageLoadState.Error) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?, loading: () -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?)  <br>  <br>Brief description  <br>Creates a composable that will attempt to load the given data using Coil, and then display the result in an Image.This version of the function is more opinionated, providing:<ul><li>Support for displaying alternative content while the request is 'loading'. See the loading parameter.</li><li>Support for displaying alternative content if the request was unsuccessful. See the error parameter.</li><li>Support for automatically fading-in the image once loaded. See the fadeIn parameter.</li></ul>CoilImage(  <br>  data = "https://www.image.url",  <br>  fadeIn = true,  <br>  loading = {  <br>    Stack(Modifier.fillMaxSize()) {  <br>      CircularProgressIndicator(Modifier.align(Alignment.Center))  <br>    }  <br>  }  <br>)  <br>Content  <br>@Composable()  <br>  <br>fun [CoilImage](-coil-image.md)(data: [Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html), modifier: Modifier, alignment: Alignment, contentScale: ContentScale, colorFilter: ColorFilter?, fadeIn: [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), requestBuilder: ImageRequest.Builder.(IntSize) -> ImageRequest.Builder?, imageLoader: ImageLoader, shouldRefetchOnSizeChange: (ImageLoadState, IntSize) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html), onRequestCompleted: (ImageLoadState) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html), error: (ImageLoadState.Error) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?, loading: () -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?)  <br>
| [CoilImageWithCrossfade](-coil-image-with-crossfade.md)|   <br>Content  <br>@Composable()  <br>  <br>~~fun~~ [~~CoilImageWithCrossfade~~](-coil-image-with-crossfade.md)~~(~~~~request~~~~:~~ ImageRequest~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ [Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ (ImageLoadState, IntSize) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)~~,~~ ~~onRequestCompleted~~~~:~~ (ImageLoadState) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)~~,~~ ~~error~~~~:~~ (ImageLoadState.Error) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?~~,~~ ~~loading~~~~:~~ () -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?~~)~~  <br>@Composable()  <br>  <br>~~fun~~ [~~CoilImageWithCrossfade~~](-coil-image-with-crossfade.md)~~(~~~~data~~~~:~~ [Any](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)~~,~~ ~~modifier~~~~:~~ Modifier~~,~~ ~~alignment~~~~:~~ Alignment~~,~~ ~~contentScale~~~~:~~ ContentScale~~,~~ ~~crossfadeDuration~~~~:~~ [Int](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html)~~,~~ ~~imageLoader~~~~:~~ ImageLoader~~,~~ ~~shouldRefetchOnSizeChange~~~~:~~ (ImageLoadState, IntSize) -> [Boolean](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)~~,~~ ~~onRequestCompleted~~~~:~~ (ImageLoadState) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)~~,~~ ~~error~~~~:~~ (ImageLoadState.Error) -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?~~,~~ ~~loading~~~~:~~ () -> [Unit](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html)?~~)~~  <br>

